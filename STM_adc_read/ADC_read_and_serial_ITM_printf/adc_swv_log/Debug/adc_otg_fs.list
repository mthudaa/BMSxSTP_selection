
adc_otg_fs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080080a8  080080a8  000180a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008108  08008108  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008108  08008108  00018108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008110  08008110  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008110  08008110  00018110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008114  08008114  00018114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001ce8  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001de4  20001de4  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f96b  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000303a  00000000  00000000  0002fada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ce0  00000000  00000000  00032b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000990  00000000  00000000  000337f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023df2  00000000  00000000  00034188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011ae4  00000000  00000000  00057f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d06ec  00000000  00000000  00069a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003380  00000000  00000000  0013a14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0013d4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008090 	.word	0x08008090

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08008090 	.word	0x08008090

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_ADC_ConvCpltCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	value = buffer;
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <HAL_ADC_ConvCpltCallback+0x20>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	461a      	mov	r2, r3
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <HAL_ADC_ConvCpltCallback+0x24>)
 80004d4:	601a      	str	r2, [r3, #0]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	200001c0 	.word	0x200001c0
 80004e8:	200001cc 	.word	0x200001cc

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fac8 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f894 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f96e 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004fc:	f000 f94c 	bl	8000798 <MX_DMA_Init>
  MX_ADC1_Init();
 8000500:	f000 f8f8 	bl	80006f4 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000504:	f007 f87e 	bl	8007604 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &buffer, 1);
 8000508:	2201      	movs	r2, #1
 800050a:	493f      	ldr	r1, [pc, #252]	; (8000608 <main+0x11c>)
 800050c:	483f      	ldr	r0, [pc, #252]	; (800060c <main+0x120>)
 800050e:	f000 fb93 	bl	8000c38 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, &buffer, 1);
 8000512:	2201      	movs	r2, #1
 8000514:	493c      	ldr	r1, [pc, #240]	; (8000608 <main+0x11c>)
 8000516:	483d      	ldr	r0, [pc, #244]	; (800060c <main+0x120>)
 8000518:	f000 fb8e 	bl	8000c38 <HAL_ADC_Start_DMA>
	  num = value;
 800051c:	4b3c      	ldr	r3, [pc, #240]	; (8000610 <main+0x124>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a3c      	ldr	r2, [pc, #240]	; (8000614 <main+0x128>)
 8000522:	6013      	str	r3, [r2, #0]
	  kirim[3] = (int)(num%10)+'0';
 8000524:	4b3b      	ldr	r3, [pc, #236]	; (8000614 <main+0x128>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b3b      	ldr	r3, [pc, #236]	; (8000618 <main+0x12c>)
 800052a:	fb83 1302 	smull	r1, r3, r3, r2
 800052e:	1099      	asrs	r1, r3, #2
 8000530:	17d3      	asrs	r3, r2, #31
 8000532:	1ac9      	subs	r1, r1, r3
 8000534:	460b      	mov	r3, r1
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	440b      	add	r3, r1
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	1ad1      	subs	r1, r2, r3
 800053e:	b2cb      	uxtb	r3, r1
 8000540:	3330      	adds	r3, #48	; 0x30
 8000542:	b2da      	uxtb	r2, r3
 8000544:	4b35      	ldr	r3, [pc, #212]	; (800061c <main+0x130>)
 8000546:	70da      	strb	r2, [r3, #3]
	  num /= 10;
 8000548:	4b32      	ldr	r3, [pc, #200]	; (8000614 <main+0x128>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a32      	ldr	r2, [pc, #200]	; (8000618 <main+0x12c>)
 800054e:	fb82 1203 	smull	r1, r2, r2, r3
 8000552:	1092      	asrs	r2, r2, #2
 8000554:	17db      	asrs	r3, r3, #31
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	4a2e      	ldr	r2, [pc, #184]	; (8000614 <main+0x128>)
 800055a:	6013      	str	r3, [r2, #0]
	  kirim[2] = (int)(num%10)+'0';
 800055c:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <main+0x128>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <main+0x12c>)
 8000562:	fb83 1302 	smull	r1, r3, r3, r2
 8000566:	1099      	asrs	r1, r3, #2
 8000568:	17d3      	asrs	r3, r2, #31
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	460b      	mov	r3, r1
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	440b      	add	r3, r1
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	1ad1      	subs	r1, r2, r3
 8000576:	b2cb      	uxtb	r3, r1
 8000578:	3330      	adds	r3, #48	; 0x30
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b27      	ldr	r3, [pc, #156]	; (800061c <main+0x130>)
 800057e:	709a      	strb	r2, [r3, #2]
	  num /= 10;
 8000580:	4b24      	ldr	r3, [pc, #144]	; (8000614 <main+0x128>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a24      	ldr	r2, [pc, #144]	; (8000618 <main+0x12c>)
 8000586:	fb82 1203 	smull	r1, r2, r2, r3
 800058a:	1092      	asrs	r2, r2, #2
 800058c:	17db      	asrs	r3, r3, #31
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	4a20      	ldr	r2, [pc, #128]	; (8000614 <main+0x128>)
 8000592:	6013      	str	r3, [r2, #0]
	  kirim[1] = (int)(num%10)+'0';
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <main+0x128>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <main+0x12c>)
 800059a:	fb83 1302 	smull	r1, r3, r3, r2
 800059e:	1099      	asrs	r1, r3, #2
 80005a0:	17d3      	asrs	r3, r2, #31
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	460b      	mov	r3, r1
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	1ad1      	subs	r1, r2, r3
 80005ae:	b2cb      	uxtb	r3, r1
 80005b0:	3330      	adds	r3, #48	; 0x30
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b19      	ldr	r3, [pc, #100]	; (800061c <main+0x130>)
 80005b6:	705a      	strb	r2, [r3, #1]
	  num /= 10;
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <main+0x128>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a16      	ldr	r2, [pc, #88]	; (8000618 <main+0x12c>)
 80005be:	fb82 1203 	smull	r1, r2, r2, r3
 80005c2:	1092      	asrs	r2, r2, #2
 80005c4:	17db      	asrs	r3, r3, #31
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <main+0x128>)
 80005ca:	6013      	str	r3, [r2, #0]
	  kirim[0] = (int)(num%10)+'0';
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <main+0x128>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <main+0x12c>)
 80005d2:	fb83 1302 	smull	r1, r3, r3, r2
 80005d6:	1099      	asrs	r1, r3, #2
 80005d8:	17d3      	asrs	r3, r2, #31
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	460b      	mov	r3, r1
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	1ad1      	subs	r1, r2, r3
 80005e6:	b2cb      	uxtb	r3, r1
 80005e8:	3330      	adds	r3, #48	; 0x30
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <main+0x130>)
 80005ee:	701a      	strb	r2, [r3, #0]
	  kirim[4] = '\n';
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <main+0x130>)
 80005f2:	220a      	movs	r2, #10
 80005f4:	711a      	strb	r2, [r3, #4]
	  CDC_Transmit_FS(kirim,5);
 80005f6:	2105      	movs	r1, #5
 80005f8:	4808      	ldr	r0, [pc, #32]	; (800061c <main+0x130>)
 80005fa:	f007 f8c1 	bl	8007780 <CDC_Transmit_FS>
	  HAL_Delay(10);
 80005fe:	200a      	movs	r0, #10
 8000600:	f000 fab2 	bl	8000b68 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, &buffer, 1);
 8000604:	e785      	b.n	8000512 <main+0x26>
 8000606:	bf00      	nop
 8000608:	200001c0 	.word	0x200001c0
 800060c:	20000118 	.word	0x20000118
 8000610:	200001cc 	.word	0x200001cc
 8000614:	200001d0 	.word	0x200001d0
 8000618:	66666667 	.word	0x66666667
 800061c:	200001c4 	.word	0x200001c4

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f007 fd02 	bl	8008038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a27      	ldr	r2, [pc, #156]	; (80006ec <SystemClock_Config+0xcc>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xd0>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000694:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000698:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800069e:	2307      	movs	r3, #7
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 ff26 	bl	80034f8 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006b2:	f000 f8c7 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2105      	movs	r1, #5
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 f987 	bl	80039e8 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e0:	f000 f8b0 	bl	8000844 <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3750      	adds	r7, #80	; 0x50
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_ADC1_Init+0x98>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <MX_ADC1_Init+0x9c>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_ADC1_Init+0x98>)
 800070e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000712:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_ADC1_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_ADC1_Init+0x98>)
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_ADC1_Init+0xa0>)
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_ADC1_Init+0x98>)
 8000742:	2201      	movs	r2, #1
 8000744:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_ADC1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_ADC1_Init+0x98>)
 8000750:	2201      	movs	r2, #1
 8000752:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_ADC1_Init+0x98>)
 8000756:	f000 fa2b 	bl	8000bb0 <HAL_ADC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 f870 	bl	8000844 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_ADC1_Init+0x98>)
 8000776:	f000 fb83 	bl	8000e80 <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000780:	f000 f860 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000118 	.word	0x20000118
 8000790:	40012000 	.word	0x40012000
 8000794:	0f000001 	.word	0x0f000001

08000798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_DMA_Init+0x3c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <MX_DMA_Init+0x3c>)
 80007a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_DMA_Init+0x3c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	2038      	movs	r0, #56	; 0x38
 80007c0:	f000 fed9 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007c4:	2038      	movs	r0, #56	; 0x38
 80007c6:	f000 fef2 	bl	80015ae <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_GPIO_Init+0x68>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <MX_GPIO_Init+0x68>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_GPIO_Init+0x68>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_GPIO_Init+0x68>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <MX_GPIO_Init+0x68>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_GPIO_Init+0x68>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_GPIO_Init+0x68>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <MX_GPIO_Init+0x68>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_GPIO_Init+0x68>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <HAL_MspInit+0x4c>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800088e:	2007      	movs	r0, #7
 8000890:	f000 fe66 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800

080008a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a2f      	ldr	r2, [pc, #188]	; (800097c <HAL_ADC_MspInit+0xdc>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d157      	bne.n	8000972 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <HAL_ADC_MspInit+0xe0>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	4a2d      	ldr	r2, [pc, #180]	; (8000980 <HAL_ADC_MspInit+0xe0>)
 80008cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d0:	6453      	str	r3, [r2, #68]	; 0x44
 80008d2:	4b2b      	ldr	r3, [pc, #172]	; (8000980 <HAL_ADC_MspInit+0xe0>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <HAL_ADC_MspInit+0xe0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a26      	ldr	r2, [pc, #152]	; (8000980 <HAL_ADC_MspInit+0xe0>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <HAL_ADC_MspInit+0xe0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fa:	2301      	movs	r3, #1
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fe:	2303      	movs	r3, #3
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	481d      	ldr	r0, [pc, #116]	; (8000984 <HAL_ADC_MspInit+0xe4>)
 800090e:	f001 f9d9 	bl	8001cc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <HAL_ADC_MspInit+0xe8>)
 8000914:	4a1d      	ldr	r2, [pc, #116]	; (800098c <HAL_ADC_MspInit+0xec>)
 8000916:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <HAL_ADC_MspInit+0xe8>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <HAL_ADC_MspInit+0xe8>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_ADC_MspInit+0xe8>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_ADC_MspInit+0xe8>)
 800092c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000930:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_ADC_MspInit+0xe8>)
 8000934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000938:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <HAL_ADC_MspInit+0xe8>)
 800093c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000940:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_ADC_MspInit+0xe8>)
 8000944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000948:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_ADC_MspInit+0xe8>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <HAL_ADC_MspInit+0xe8>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000956:	480c      	ldr	r0, [pc, #48]	; (8000988 <HAL_ADC_MspInit+0xe8>)
 8000958:	f000 fe44 	bl	80015e4 <HAL_DMA_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000962:	f7ff ff6f 	bl	8000844 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <HAL_ADC_MspInit+0xe8>)
 800096a:	639a      	str	r2, [r3, #56]	; 0x38
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_ADC_MspInit+0xe8>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40012000 	.word	0x40012000
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000
 8000988:	20000160 	.word	0x20000160
 800098c:	40026410 	.word	0x40026410

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f8a4 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <DMA2_Stream0_IRQHandler+0x10>)
 80009ea:	f000 ff01 	bl	80017f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000160 	.word	0x20000160

080009f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <OTG_FS_IRQHandler+0x10>)
 80009fe:	f001 fc4d 	bl	800229c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200016b8 	.word	0x200016b8

08000a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <SystemInit+0x20>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <SystemInit+0x20>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a36:	490e      	ldr	r1, [pc, #56]	; (8000a70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a4c:	4c0b      	ldr	r4, [pc, #44]	; (8000a7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a5a:	f7ff ffd7 	bl	8000a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f007 faf3 	bl	8008048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a62:	f7ff fd43 	bl	80004ec <main>
  bx  lr    
 8000a66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a74:	08008118 	.word	0x08008118
  ldr r2, =_sbss
 8000a78:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a7c:	20001de4 	.word	0x20001de4

08000a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <HAL_Init+0x40>)
 8000a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_Init+0x40>)
 8000a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <HAL_Init+0x40>)
 8000aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 fd57 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f808 	bl	8000ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab8:	f7ff feca 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023c00 	.word	0x40023c00

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x54>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_InitTick+0x58>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fd6f 	bl	80015ca <HAL_SYSTICK_Config>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00e      	b.n	8000b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d80a      	bhi.n	8000b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 fd37 	bl	8001576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <HAL_InitTick+0x5c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e000      	b.n	8000b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000004 	.word	0x20000004

08000b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x20>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_IncTick+0x24>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	200001d4 	.word	0x200001d4

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	200001d4 	.word	0x200001d4

08000b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff ffee 	bl	8000b50 <HAL_GetTick>
 8000b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b80:	d005      	beq.n	8000b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_Delay+0x44>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b8e:	bf00      	nop
 8000b90:	f7ff ffde 	bl	8000b50 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d8f7      	bhi.n	8000b90 <HAL_Delay+0x28>
  {
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008

08000bb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e033      	b.n	8000c2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d109      	bne.n	8000be2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fe66 	bl	80008a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d118      	bne.n	8000c20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bf6:	f023 0302 	bic.w	r3, r3, #2
 8000bfa:	f043 0202 	orr.w	r2, r3, #2
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 fa5e 	bl	80010c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f023 0303 	bic.w	r3, r3, #3
 8000c16:	f043 0201 	orr.w	r2, r3, #1
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c1e:	e001      	b.n	8000c24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d101      	bne.n	8000c56 <HAL_ADC_Start_DMA+0x1e>
 8000c52:	2302      	movs	r3, #2
 8000c54:	e0e9      	b.n	8000e2a <HAL_ADC_Start_DMA+0x1f2>
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d018      	beq.n	8000c9e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f042 0201 	orr.w	r2, r2, #1
 8000c7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c7c:	4b6d      	ldr	r3, [pc, #436]	; (8000e34 <HAL_ADC_Start_DMA+0x1fc>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a6d      	ldr	r2, [pc, #436]	; (8000e38 <HAL_ADC_Start_DMA+0x200>)
 8000c82:	fba2 2303 	umull	r2, r3, r2, r3
 8000c86:	0c9a      	lsrs	r2, r3, #18
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000c90:	e002      	b.n	8000c98 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1f9      	bne.n	8000c92 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cac:	d107      	bne.n	8000cbe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	f040 80a1 	bne.w	8000e10 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cd6:	f023 0301 	bic.w	r3, r3, #1
 8000cda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d007      	beq.n	8000d00 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cf8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d0c:	d106      	bne.n	8000d1c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f023 0206 	bic.w	r2, r3, #6
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	645a      	str	r2, [r3, #68]	; 0x44
 8000d1a:	e002      	b.n	8000d22 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d2a:	4b44      	ldr	r3, [pc, #272]	; (8000e3c <HAL_ADC_Start_DMA+0x204>)
 8000d2c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d32:	4a43      	ldr	r2, [pc, #268]	; (8000e40 <HAL_ADC_Start_DMA+0x208>)
 8000d34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d3a:	4a42      	ldr	r2, [pc, #264]	; (8000e44 <HAL_ADC_Start_DMA+0x20c>)
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d42:	4a41      	ldr	r2, [pc, #260]	; (8000e48 <HAL_ADC_Start_DMA+0x210>)
 8000d44:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d4e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000d5e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d6e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	334c      	adds	r3, #76	; 0x4c
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	68ba      	ldr	r2, [r7, #8]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f000 fcde 	bl	8001740 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 031f 	and.w	r3, r3, #31
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d12a      	bne.n	8000de6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a2d      	ldr	r2, [pc, #180]	; (8000e4c <HAL_ADC_Start_DMA+0x214>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d015      	beq.n	8000dc6 <HAL_ADC_Start_DMA+0x18e>
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a2c      	ldr	r2, [pc, #176]	; (8000e50 <HAL_ADC_Start_DMA+0x218>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d105      	bne.n	8000db0 <HAL_ADC_Start_DMA+0x178>
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <HAL_ADC_Start_DMA+0x204>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 031f 	and.w	r3, r3, #31
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d00a      	beq.n	8000dc6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <HAL_ADC_Start_DMA+0x21c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d136      	bne.n	8000e28 <HAL_ADC_Start_DMA+0x1f0>
 8000dba:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <HAL_ADC_Start_DMA+0x204>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0310 	and.w	r3, r3, #16
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d130      	bne.n	8000e28 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d129      	bne.n	8000e28 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	e020      	b.n	8000e28 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <HAL_ADC_Start_DMA+0x214>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d11b      	bne.n	8000e28 <HAL_ADC_Start_DMA+0x1f0>
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d114      	bne.n	8000e28 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	e00b      	b.n	8000e28 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f043 0210 	orr.w	r2, r3, #16
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e20:	f043 0201 	orr.w	r2, r3, #1
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000000 	.word	0x20000000
 8000e38:	431bde83 	.word	0x431bde83
 8000e3c:	40012300 	.word	0x40012300
 8000e40:	080012bd 	.word	0x080012bd
 8000e44:	08001377 	.word	0x08001377
 8000e48:	08001393 	.word	0x08001393
 8000e4c:	40012000 	.word	0x40012000
 8000e50:	40012100 	.word	0x40012100
 8000e54:	40012200 	.word	0x40012200

08000e58 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d101      	bne.n	8000e9c <HAL_ADC_ConfigChannel+0x1c>
 8000e98:	2302      	movs	r3, #2
 8000e9a:	e105      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x228>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b09      	cmp	r3, #9
 8000eaa:	d925      	bls.n	8000ef8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68d9      	ldr	r1, [r3, #12]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3b1e      	subs	r3, #30
 8000ec2:	2207      	movs	r2, #7
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43da      	mvns	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	400a      	ands	r2, r1
 8000ed0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68d9      	ldr	r1, [r3, #12]
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4403      	add	r3, r0
 8000eea:	3b1e      	subs	r3, #30
 8000eec:	409a      	lsls	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	e022      	b.n	8000f3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6919      	ldr	r1, [r3, #16]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	461a      	mov	r2, r3
 8000f06:	4613      	mov	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	400a      	ands	r2, r1
 8000f1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6919      	ldr	r1, [r3, #16]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	4603      	mov	r3, r0
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4403      	add	r3, r0
 8000f34:	409a      	lsls	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d824      	bhi.n	8000f90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	3b05      	subs	r3, #5
 8000f58:	221f      	movs	r2, #31
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	400a      	ands	r2, r1
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	3b05      	subs	r3, #5
 8000f82:	fa00 f203 	lsl.w	r2, r0, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f8e:	e04c      	b.n	800102a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b0c      	cmp	r3, #12
 8000f96:	d824      	bhi.n	8000fe2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3b23      	subs	r3, #35	; 0x23
 8000faa:	221f      	movs	r2, #31
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43da      	mvns	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3b23      	subs	r3, #35	; 0x23
 8000fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	631a      	str	r2, [r3, #48]	; 0x30
 8000fe0:	e023      	b.n	800102a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3b41      	subs	r3, #65	; 0x41
 8000ff4:	221f      	movs	r2, #31
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	400a      	ands	r2, r1
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	4618      	mov	r0, r3
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	3b41      	subs	r3, #65	; 0x41
 800101e:	fa00 f203 	lsl.w	r2, r0, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	430a      	orrs	r2, r1
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_ADC_ConfigChannel+0x234>)
 800102c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <HAL_ADC_ConfigChannel+0x238>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d109      	bne.n	800104c <HAL_ADC_ConfigChannel+0x1cc>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b12      	cmp	r3, #18
 800103e:	d105      	bne.n	800104c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <HAL_ADC_ConfigChannel+0x238>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d123      	bne.n	800109e <HAL_ADC_ConfigChannel+0x21e>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b10      	cmp	r3, #16
 800105c:	d003      	beq.n	8001066 <HAL_ADC_ConfigChannel+0x1e6>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b11      	cmp	r3, #17
 8001064:	d11b      	bne.n	800109e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b10      	cmp	r3, #16
 8001078:	d111      	bne.n	800109e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_ADC_ConfigChannel+0x23c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <HAL_ADC_ConfigChannel+0x240>)
 8001080:	fba2 2303 	umull	r2, r3, r2, r3
 8001084:	0c9a      	lsrs	r2, r3, #18
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001090:	e002      	b.n	8001098 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	3b01      	subs	r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f9      	bne.n	8001092 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	40012300 	.word	0x40012300
 80010b8:	40012000 	.word	0x40012000
 80010bc:	20000000 	.word	0x20000000
 80010c0:	431bde83 	.word	0x431bde83

080010c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010cc:	4b79      	ldr	r3, [pc, #484]	; (80012b4 <ADC_Init+0x1f0>)
 80010ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	431a      	orrs	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6859      	ldr	r1, [r3, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	021a      	lsls	r2, r3, #8
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800111c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6859      	ldr	r1, [r3, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	430a      	orrs	r2, r1
 800112e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800113e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6899      	ldr	r1, [r3, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	4a58      	ldr	r2, [pc, #352]	; (80012b8 <ADC_Init+0x1f4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d022      	beq.n	80011a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800116a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6899      	ldr	r1, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800118c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6899      	ldr	r1, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	e00f      	b.n	80011c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0202 	bic.w	r2, r2, #2
 80011d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6899      	ldr	r1, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7e1b      	ldrb	r3, [r3, #24]
 80011dc:	005a      	lsls	r2, r3, #1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d01b      	beq.n	8001228 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800120e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6859      	ldr	r1, [r3, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	3b01      	subs	r3, #1
 800121c:	035a      	lsls	r2, r3, #13
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	e007      	b.n	8001238 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001236:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	3b01      	subs	r3, #1
 8001254:	051a      	lsls	r2, r3, #20
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800126c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6899      	ldr	r1, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800127a:	025a      	lsls	r2, r3, #9
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001292:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6899      	ldr	r1, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	029a      	lsls	r2, r3, #10
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	609a      	str	r2, [r3, #8]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40012300 	.word	0x40012300
 80012b8:	0f000001 	.word	0x0f000001

080012bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d13c      	bne.n	8001350 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d12b      	bne.n	8001348 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d127      	bne.n	8001348 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001302:	2b00      	cmp	r3, #0
 8001304:	d006      	beq.n	8001314 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001310:	2b00      	cmp	r3, #0
 8001312:	d119      	bne.n	8001348 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0220 	bic.w	r2, r2, #32
 8001322:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d105      	bne.n	8001348 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f043 0201 	orr.w	r2, r3, #1
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f7ff f8bb 	bl	80004c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800134e:	e00e      	b.n	800136e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f003 0310 	and.w	r3, r3, #16
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f7ff fd85 	bl	8000e6c <HAL_ADC_ErrorCallback>
}
 8001362:	e004      	b.n	800136e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	4798      	blx	r3
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001382:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f7ff fd67 	bl	8000e58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2240      	movs	r2, #64	; 0x40
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f043 0204 	orr.w	r2, r3, #4
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff fd5a 	bl	8000e6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff29 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff3e 	bl	8001408 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff8e 	bl	80014b4 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5d 	bl	8001460 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff31 	bl	8001424 <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa2 	bl	800151c <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff faae 	bl	8000b50 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e099      	b.n	8001734 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2202      	movs	r2, #2
 8001604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0201 	bic.w	r2, r2, #1
 800161e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001620:	e00f      	b.n	8001642 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001622:	f7ff fa95 	bl	8000b50 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b05      	cmp	r3, #5
 800162e:	d908      	bls.n	8001642 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2220      	movs	r2, #32
 8001634:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2203      	movs	r2, #3
 800163a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e078      	b.n	8001734 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1e8      	bne.n	8001622 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	4b38      	ldr	r3, [pc, #224]	; (800173c <HAL_DMA_Init+0x158>)
 800165c:	4013      	ands	r3, r2
 800165e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800166e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001686:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4313      	orrs	r3, r2
 8001692:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	2b04      	cmp	r3, #4
 800169a:	d107      	bne.n	80016ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	4313      	orrs	r3, r2
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f023 0307 	bic.w	r3, r3, #7
 80016c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d117      	bne.n	8001706 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4313      	orrs	r3, r2
 80016de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00e      	beq.n	8001706 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fa6f 	bl	8001bcc <DMA_CheckFifoParam>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2240      	movs	r2, #64	; 0x40
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001702:	2301      	movs	r3, #1
 8001704:	e016      	b.n	8001734 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fa26 	bl	8001b60 <DMA_CalcBaseAndBitshift>
 8001714:	4603      	mov	r3, r0
 8001716:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171c:	223f      	movs	r2, #63	; 0x3f
 800171e:	409a      	lsls	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	f010803f 	.word	0xf010803f

08001740 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001756:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_DMA_Start_IT+0x26>
 8001762:	2302      	movs	r3, #2
 8001764:	e040      	b.n	80017e8 <HAL_DMA_Start_IT+0xa8>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b01      	cmp	r3, #1
 8001778:	d12f      	bne.n	80017da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2202      	movs	r2, #2
 800177e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 f9b8 	bl	8001b04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001798:	223f      	movs	r2, #63	; 0x3f
 800179a:	409a      	lsls	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0216 	orr.w	r2, r2, #22
 80017ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d007      	beq.n	80017c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0208 	orr.w	r2, r2, #8
 80017c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e005      	b.n	80017e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017e2:	2302      	movs	r3, #2
 80017e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017fc:	4b8e      	ldr	r3, [pc, #568]	; (8001a38 <HAL_DMA_IRQHandler+0x248>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a8e      	ldr	r2, [pc, #568]	; (8001a3c <HAL_DMA_IRQHandler+0x24c>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0a9b      	lsrs	r3, r3, #10
 8001808:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181a:	2208      	movs	r2, #8
 800181c:	409a      	lsls	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4013      	ands	r3, r2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d01a      	beq.n	800185c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d013      	beq.n	800185c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0204 	bic.w	r2, r2, #4
 8001842:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	2208      	movs	r2, #8
 800184a:	409a      	lsls	r2, r3
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	f043 0201 	orr.w	r2, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001860:	2201      	movs	r2, #1
 8001862:	409a      	lsls	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d012      	beq.n	8001892 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187e:	2201      	movs	r2, #1
 8001880:	409a      	lsls	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188a:	f043 0202 	orr.w	r2, r3, #2
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001896:	2204      	movs	r2, #4
 8001898:	409a      	lsls	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d012      	beq.n	80018c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00b      	beq.n	80018c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b4:	2204      	movs	r2, #4
 80018b6:	409a      	lsls	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c0:	f043 0204 	orr.w	r2, r3, #4
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	2210      	movs	r2, #16
 80018ce:	409a      	lsls	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d043      	beq.n	8001960 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d03c      	beq.n	8001960 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ea:	2210      	movs	r2, #16
 80018ec:	409a      	lsls	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d018      	beq.n	8001932 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d108      	bne.n	8001920 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	2b00      	cmp	r3, #0
 8001914:	d024      	beq.n	8001960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	4798      	blx	r3
 800191e:	e01f      	b.n	8001960 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01b      	beq.n	8001960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
 8001930:	e016      	b.n	8001960 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d107      	bne.n	8001950 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0208 	bic.w	r2, r2, #8
 800194e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	2220      	movs	r2, #32
 8001966:	409a      	lsls	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4013      	ands	r3, r2
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 808f 	beq.w	8001a90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 8087 	beq.w	8001a90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001986:	2220      	movs	r2, #32
 8001988:	409a      	lsls	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b05      	cmp	r3, #5
 8001998:	d136      	bne.n	8001a08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0216 	bic.w	r2, r2, #22
 80019a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <HAL_DMA_IRQHandler+0x1da>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d007      	beq.n	80019da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0208 	bic.w	r2, r2, #8
 80019d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	223f      	movs	r2, #63	; 0x3f
 80019e0:	409a      	lsls	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d07e      	beq.n	8001afc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	4798      	blx	r3
        }
        return;
 8001a06:	e079      	b.n	8001afc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d01d      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10d      	bne.n	8001a40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d031      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	4798      	blx	r3
 8001a34:	e02c      	b.n	8001a90 <HAL_DMA_IRQHandler+0x2a0>
 8001a36:	bf00      	nop
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d023      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4798      	blx	r3
 8001a50:	e01e      	b.n	8001a90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10f      	bne.n	8001a80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0210 	bic.w	r2, r2, #16
 8001a6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d032      	beq.n	8001afe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d022      	beq.n	8001aea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2205      	movs	r2, #5
 8001aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0201 	bic.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d307      	bcc.n	8001ad8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f2      	bne.n	8001abc <HAL_DMA_IRQHandler+0x2cc>
 8001ad6:	e000      	b.n	8001ada <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ad8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	4798      	blx	r3
 8001afa:	e000      	b.n	8001afe <HAL_DMA_IRQHandler+0x30e>
        return;
 8001afc:	bf00      	nop
    }
  }
}
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b40      	cmp	r3, #64	; 0x40
 8001b30:	d108      	bne.n	8001b44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b42:	e007      	b.n	8001b54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	60da      	str	r2, [r3, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	3b10      	subs	r3, #16
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <DMA_CalcBaseAndBitshift+0x64>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b7a:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <DMA_CalcBaseAndBitshift+0x68>)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d909      	bls.n	8001ba2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b96:	f023 0303 	bic.w	r3, r3, #3
 8001b9a:	1d1a      	adds	r2, r3, #4
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	659a      	str	r2, [r3, #88]	; 0x58
 8001ba0:	e007      	b.n	8001bb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001baa:	f023 0303 	bic.w	r3, r3, #3
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	aaaaaaab 	.word	0xaaaaaaab
 8001bc8:	08008100 	.word	0x08008100

08001bcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d11f      	bne.n	8001c26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d856      	bhi.n	8001c9a <DMA_CheckFifoParam+0xce>
 8001bec:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <DMA_CheckFifoParam+0x28>)
 8001bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf2:	bf00      	nop
 8001bf4:	08001c05 	.word	0x08001c05
 8001bf8:	08001c17 	.word	0x08001c17
 8001bfc:	08001c05 	.word	0x08001c05
 8001c00:	08001c9b 	.word	0x08001c9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d046      	beq.n	8001c9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c14:	e043      	b.n	8001c9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c1e:	d140      	bne.n	8001ca2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c24:	e03d      	b.n	8001ca2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c2e:	d121      	bne.n	8001c74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d837      	bhi.n	8001ca6 <DMA_CheckFifoParam+0xda>
 8001c36:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <DMA_CheckFifoParam+0x70>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001c4d 	.word	0x08001c4d
 8001c40:	08001c53 	.word	0x08001c53
 8001c44:	08001c4d 	.word	0x08001c4d
 8001c48:	08001c65 	.word	0x08001c65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c50:	e030      	b.n	8001cb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d025      	beq.n	8001caa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c62:	e022      	b.n	8001caa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c6c:	d11f      	bne.n	8001cae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c72:	e01c      	b.n	8001cae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d903      	bls.n	8001c82 <DMA_CheckFifoParam+0xb6>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d003      	beq.n	8001c88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c80:	e018      	b.n	8001cb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
      break;
 8001c86:	e015      	b.n	8001cb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00e      	beq.n	8001cb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
      break;
 8001c98:	e00b      	b.n	8001cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8001c9a:	bf00      	nop
 8001c9c:	e00a      	b.n	8001cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8001c9e:	bf00      	nop
 8001ca0:	e008      	b.n	8001cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ca2:	bf00      	nop
 8001ca4:	e006      	b.n	8001cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ca6:	bf00      	nop
 8001ca8:	e004      	b.n	8001cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8001caa:	bf00      	nop
 8001cac:	e002      	b.n	8001cb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cae:	bf00      	nop
 8001cb0:	e000      	b.n	8001cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8001cb2:	bf00      	nop
    }
  } 
  
  return status; 
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop

08001cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	e16b      	b.n	8001fb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	f040 815a 	bne.w	8001fb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d005      	beq.n	8001d16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d130      	bne.n	8001d78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 0201 	and.w	r2, r3, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d017      	beq.n	8001db4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d123      	bne.n	8001e08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	08da      	lsrs	r2, r3, #3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3208      	adds	r2, #8
 8001dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	220f      	movs	r2, #15
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	08da      	lsrs	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3208      	adds	r2, #8
 8001e02:	69b9      	ldr	r1, [r7, #24]
 8001e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0203 	and.w	r2, r3, #3
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80b4 	beq.w	8001fb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b60      	ldr	r3, [pc, #384]	; (8001fd0 <HAL_GPIO_Init+0x30c>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	4a5f      	ldr	r2, [pc, #380]	; (8001fd0 <HAL_GPIO_Init+0x30c>)
 8001e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e58:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5a:	4b5d      	ldr	r3, [pc, #372]	; (8001fd0 <HAL_GPIO_Init+0x30c>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e66:	4a5b      	ldr	r2, [pc, #364]	; (8001fd4 <HAL_GPIO_Init+0x310>)
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	089b      	lsrs	r3, r3, #2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a52      	ldr	r2, [pc, #328]	; (8001fd8 <HAL_GPIO_Init+0x314>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d02b      	beq.n	8001eea <HAL_GPIO_Init+0x226>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a51      	ldr	r2, [pc, #324]	; (8001fdc <HAL_GPIO_Init+0x318>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d025      	beq.n	8001ee6 <HAL_GPIO_Init+0x222>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a50      	ldr	r2, [pc, #320]	; (8001fe0 <HAL_GPIO_Init+0x31c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01f      	beq.n	8001ee2 <HAL_GPIO_Init+0x21e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4f      	ldr	r2, [pc, #316]	; (8001fe4 <HAL_GPIO_Init+0x320>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d019      	beq.n	8001ede <HAL_GPIO_Init+0x21a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4e      	ldr	r2, [pc, #312]	; (8001fe8 <HAL_GPIO_Init+0x324>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0x216>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4d      	ldr	r2, [pc, #308]	; (8001fec <HAL_GPIO_Init+0x328>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_GPIO_Init+0x212>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4c      	ldr	r2, [pc, #304]	; (8001ff0 <HAL_GPIO_Init+0x32c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <HAL_GPIO_Init+0x20e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4b      	ldr	r2, [pc, #300]	; (8001ff4 <HAL_GPIO_Init+0x330>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_GPIO_Init+0x20a>
 8001eca:	2307      	movs	r3, #7
 8001ecc:	e00e      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001ece:	2308      	movs	r3, #8
 8001ed0:	e00c      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001ed2:	2306      	movs	r3, #6
 8001ed4:	e00a      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	e008      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001eda:	2304      	movs	r3, #4
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e004      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e002      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001eea:	2300      	movs	r3, #0
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	f002 0203 	and.w	r2, r2, #3
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	4093      	lsls	r3, r2
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001efc:	4935      	ldr	r1, [pc, #212]	; (8001fd4 <HAL_GPIO_Init+0x310>)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <HAL_GPIO_Init+0x334>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2e:	4a32      	ldr	r2, [pc, #200]	; (8001ff8 <HAL_GPIO_Init+0x334>)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f34:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <HAL_GPIO_Init+0x334>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f58:	4a27      	ldr	r2, [pc, #156]	; (8001ff8 <HAL_GPIO_Init+0x334>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <HAL_GPIO_Init+0x334>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f82:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <HAL_GPIO_Init+0x334>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <HAL_GPIO_Init+0x334>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fac:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <HAL_GPIO_Init+0x334>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	2b0f      	cmp	r3, #15
 8001fbc:	f67f ae90 	bls.w	8001ce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40013800 	.word	0x40013800
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	40020c00 	.word	0x40020c00
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40021400 	.word	0x40021400
 8001ff0:	40021800 	.word	0x40021800
 8001ff4:	40021c00 	.word	0x40021c00
 8001ff8:	40013c00 	.word	0x40013c00

08001ffc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffe:	b08f      	sub	sp, #60	; 0x3c
 8002000:	af0a      	add	r7, sp, #40	; 0x28
 8002002:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e10f      	b.n	800222e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d106      	bne.n	800202e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f005 fcf1 	bl	8007a10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2203      	movs	r2, #3
 8002032:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f001 ffd8 	bl	8004002 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	687e      	ldr	r6, [r7, #4]
 800205a:	466d      	mov	r5, sp
 800205c:	f106 0410 	add.w	r4, r6, #16
 8002060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002068:	e894 0003 	ldmia.w	r4, {r0, r1}
 800206c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002070:	1d33      	adds	r3, r6, #4
 8002072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002074:	6838      	ldr	r0, [r7, #0]
 8002076:	f001 feaf 	bl	8003dd8 <USB_CoreInit>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0d0      	b.n	800222e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f001 ffc6 	bl	8004024 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	e04a      	b.n	8002134 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	333d      	adds	r3, #61	; 0x3d
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	333c      	adds	r3, #60	; 0x3c
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	b298      	uxth	r0, r3
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	3344      	adds	r3, #68	; 0x44
 80020da:	4602      	mov	r2, r0
 80020dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3340      	adds	r3, #64	; 0x40
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3348      	adds	r3, #72	; 0x48
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	334c      	adds	r3, #76	; 0x4c
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3354      	adds	r3, #84	; 0x54
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	3301      	adds	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	d3af      	bcc.n	800209e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	e044      	b.n	80021ce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	3301      	adds	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d3b5      	bcc.n	8002144 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	687e      	ldr	r6, [r7, #4]
 80021e0:	466d      	mov	r5, sp
 80021e2:	f106 0410 	add.w	r4, r6, #16
 80021e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f6:	1d33      	adds	r3, r6, #4
 80021f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fa:	6838      	ldr	r0, [r7, #0]
 80021fc:	f001 ff5e 	bl	80040bc <USB_DevInit>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00d      	b.n	800222e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f003 f8ad 	bl	8005386 <USB_DevDisconnect>

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002236 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_PCD_Start+0x1c>
 800224e:	2302      	movs	r3, #2
 8002250:	e020      	b.n	8002294 <HAL_PCD_Start+0x5e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	2b01      	cmp	r3, #1
 8002260:	d109      	bne.n	8002276 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002266:	2b01      	cmp	r3, #1
 8002268:	d005      	beq.n	8002276 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f001 feb0 	bl	8003fe0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f003 f85d 	bl	8005344 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b08d      	sub	sp, #52	; 0x34
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f003 f91b 	bl	80054ee <USB_GetMode>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f040 848a 	bne.w	8002bd4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 f87f 	bl	80053c8 <USB_ReadInterrupts>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8480 	beq.w	8002bd2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 f86c 	bl	80053c8 <USB_ReadInterrupts>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d107      	bne.n	800230a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f002 0202 	and.w	r2, r2, #2
 8002308:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f003 f85a 	bl	80053c8 <USB_ReadInterrupts>
 8002314:	4603      	mov	r3, r0
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b10      	cmp	r3, #16
 800231c:	d161      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0210 	bic.w	r2, r2, #16
 800232c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	f003 020f 	and.w	r2, r3, #15
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	3304      	adds	r3, #4
 800234c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	0c5b      	lsrs	r3, r3, #17
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	2b02      	cmp	r3, #2
 8002358:	d124      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d035      	beq.n	80023d2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002374:	b29b      	uxth	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	6a38      	ldr	r0, [r7, #32]
 800237a:	f002 fe91 	bl	80050a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800238a:	441a      	add	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800239c:	441a      	add	r2, r3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	621a      	str	r2, [r3, #32]
 80023a2:	e016      	b.n	80023d2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	0c5b      	lsrs	r3, r3, #17
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	2b06      	cmp	r3, #6
 80023ae:	d110      	bne.n	80023d2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023b6:	2208      	movs	r2, #8
 80023b8:	4619      	mov	r1, r3
 80023ba:	6a38      	ldr	r0, [r7, #32]
 80023bc:	f002 fe70 	bl	80050a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	6a1a      	ldr	r2, [r3, #32]
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023cc:	441a      	add	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0210 	orr.w	r2, r2, #16
 80023e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 ffee 	bl	80053c8 <USB_ReadInterrupts>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023f6:	f040 80a7 	bne.w	8002548 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f002 fff3 	bl	80053ee <USB_ReadDevAllOutEpInterrupt>
 8002408:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800240a:	e099      	b.n	8002540 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 808e 	beq.w	8002534 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f003 f817 	bl	8005456 <USB_ReadDevOutEPInterrupt>
 8002428:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00c      	beq.n	800244e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002440:	461a      	mov	r2, r3
 8002442:	2301      	movs	r3, #1
 8002444:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002446:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fec3 	bl	80031d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00c      	beq.n	8002472 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002464:	461a      	mov	r2, r3
 8002466:	2308      	movs	r3, #8
 8002468:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800246a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 ff99 	bl	80033a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	4413      	add	r3, r2
 8002484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002488:	461a      	mov	r2, r3
 800248a:	2310      	movs	r3, #16
 800248c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d030      	beq.n	80024fa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a0:	2b80      	cmp	r3, #128	; 0x80
 80024a2:	d109      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024b6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	3304      	adds	r3, #4
 80024cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	78db      	ldrb	r3, [r3, #3]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d108      	bne.n	80024e8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2200      	movs	r2, #0
 80024da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f005 fb9a 	bl	8007c1c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f4:	461a      	mov	r2, r3
 80024f6:	2302      	movs	r3, #2
 80024f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	4413      	add	r3, r2
 800250c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002510:	461a      	mov	r2, r3
 8002512:	2320      	movs	r3, #32
 8002514:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d009      	beq.n	8002534 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	4413      	add	r3, r2
 8002528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252c:	461a      	mov	r2, r3
 800252e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002532:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	3301      	adds	r3, #1
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	085b      	lsrs	r3, r3, #1
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002542:	2b00      	cmp	r3, #0
 8002544:	f47f af62 	bne.w	800240c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f002 ff3b 	bl	80053c8 <USB_ReadInterrupts>
 8002552:	4603      	mov	r3, r0
 8002554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002558:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800255c:	f040 80db 	bne.w	8002716 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f002 ff5c 	bl	8005422 <USB_ReadDevAllInEpInterrupt>
 800256a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002570:	e0cd      	b.n	800270e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80c2 	beq.w	8002702 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f002 ff82 	bl	8005492 <USB_ReadDevInEPInterrupt>
 800258e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d057      	beq.n	800264a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	2201      	movs	r2, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69f9      	ldr	r1, [r7, #28]
 80025b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025ba:	4013      	ands	r3, r2
 80025bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ca:	461a      	mov	r2, r3
 80025cc:	2301      	movs	r3, #1
 80025ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d132      	bne.n	800263e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	334c      	adds	r3, #76	; 0x4c
 80025e8:	6819      	ldr	r1, [r3, #0]
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4403      	add	r3, r0
 80025f8:	3348      	adds	r3, #72	; 0x48
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4419      	add	r1, r3
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4403      	add	r3, r0
 800260c:	334c      	adds	r3, #76	; 0x4c
 800260e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	2b00      	cmp	r3, #0
 8002614:	d113      	bne.n	800263e <HAL_PCD_IRQHandler+0x3a2>
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	3354      	adds	r3, #84	; 0x54
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d108      	bne.n	800263e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002636:	461a      	mov	r2, r3
 8002638:	2101      	movs	r1, #1
 800263a:	f002 ff89 	bl	8005550 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4619      	mov	r1, r3
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f005 fa64 	bl	8007b12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4413      	add	r3, r2
 800265c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002660:	461a      	mov	r2, r3
 8002662:	2308      	movs	r3, #8
 8002664:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800267c:	461a      	mov	r2, r3
 800267e:	2310      	movs	r3, #16
 8002680:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002698:	461a      	mov	r2, r3
 800269a:	2340      	movs	r3, #64	; 0x40
 800269c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d023      	beq.n	80026f0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026aa:	6a38      	ldr	r0, [r7, #32]
 80026ac:	f001 fe6a 	bl	8004384 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	3338      	adds	r3, #56	; 0x38
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	78db      	ldrb	r3, [r3, #3]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d108      	bne.n	80026de <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2200      	movs	r2, #0
 80026d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	4619      	mov	r1, r3
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f005 fab1 	bl	8007c40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ea:	461a      	mov	r2, r3
 80026ec:	2302      	movs	r3, #2
 80026ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fcdb 	bl	80030b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	3301      	adds	r3, #1
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002710:	2b00      	cmp	r3, #0
 8002712:	f47f af2e 	bne.w	8002572 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f002 fe54 	bl	80053c8 <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800272a:	d122      	bne.n	8002772 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002746:	2b01      	cmp	r3, #1
 8002748:	d108      	bne.n	800275c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002752:	2100      	movs	r1, #0
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fec3 	bl	80034e0 <HAL_PCDEx_LPM_Callback>
 800275a:	e002      	b.n	8002762 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f005 fa4f 	bl	8007c00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f002 fe26 	bl	80053c8 <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002786:	d112      	bne.n	80027ae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d102      	bne.n	800279e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f005 fa0b 	bl	8007bb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027ac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 fe08 	bl	80053c8 <USB_ReadInterrupts>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c2:	f040 80b7 	bne.w	8002934 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2110      	movs	r1, #16
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 fdcf 	bl	8004384 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ea:	e046      	b.n	800287a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f8:	461a      	mov	r2, r3
 80027fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002810:	0151      	lsls	r1, r2, #5
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	440a      	add	r2, r1
 8002816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800281a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800281e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282c:	461a      	mov	r2, r3
 800282e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002832:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002844:	0151      	lsls	r1, r2, #5
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	440a      	add	r2, r1
 800284a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800284e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002852:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	4413      	add	r3, r2
 800285c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002864:	0151      	lsls	r1, r2, #5
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	440a      	add	r2, r1
 800286a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800286e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002872:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	3301      	adds	r3, #1
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002880:	429a      	cmp	r2, r3
 8002882:	d3b3      	bcc.n	80027ec <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002892:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002896:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	2b00      	cmp	r3, #0
 800289e:	d016      	beq.n	80028ce <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b0:	f043 030b 	orr.w	r3, r3, #11
 80028b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c6:	f043 030b 	orr.w	r3, r3, #11
 80028ca:	6453      	str	r3, [r2, #68]	; 0x44
 80028cc:	e015      	b.n	80028fa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028f4:	f043 030b 	orr.w	r3, r3, #11
 80028f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002908:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800290c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800291e:	461a      	mov	r2, r3
 8002920:	f002 fe16 	bl	8005550 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f002 fd45 	bl	80053c8 <USB_ReadInterrupts>
 800293e:	4603      	mov	r3, r0
 8002940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002948:	d124      	bne.n	8002994 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f002 fddb 	bl	800550a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f001 fd90 	bl	800447e <USB_GetDevSpeed>
 800295e:	4603      	mov	r3, r0
 8002960:	461a      	mov	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681c      	ldr	r4, [r3, #0]
 800296a:	f001 fa29 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 800296e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	4620      	mov	r0, r4
 800297a:	f001 fa8f 	bl	8003e9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f005 f8ef 	bl	8007b62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002992:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f002 fd15 	bl	80053c8 <USB_ReadInterrupts>
 800299e:	4603      	mov	r3, r0
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d10a      	bne.n	80029be <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f005 f8cc 	bl	8007b46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f002 0208 	and.w	r2, r2, #8
 80029bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 fd00 	bl	80053c8 <USB_ReadInterrupts>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ce:	2b80      	cmp	r3, #128	; 0x80
 80029d0:	d122      	bne.n	8002a18 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029de:	2301      	movs	r3, #1
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
 80029e2:	e014      	b.n	8002a0e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d105      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fb27 	bl	8003056 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d3e5      	bcc.n	80029e4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f002 fcd3 	bl	80053c8 <USB_ReadInterrupts>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a2c:	d13b      	bne.n	8002aa6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a2e:	2301      	movs	r3, #1
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
 8002a32:	e02b      	b.n	8002a8c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3340      	adds	r3, #64	; 0x40
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d115      	bne.n	8002a86 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	da12      	bge.n	8002a86 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	333f      	adds	r3, #63	; 0x3f
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fae8 	bl	8003056 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	3301      	adds	r3, #1
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d3ce      	bcc.n	8002a34 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 fc8c 	bl	80053c8 <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002aba:	d155      	bne.n	8002b68 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002abc:	2301      	movs	r3, #1
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac0:	e045      	b.n	8002b4e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d12e      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002aea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	da2b      	bge.n	8002b48 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002afc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d121      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10a      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b44:	6053      	str	r3, [r2, #4]
            break;
 8002b46:	e007      	b.n	8002b58 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d3b4      	bcc.n	8002ac2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f002 fc2b 	bl	80053c8 <USB_ReadInterrupts>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7c:	d10a      	bne.n	8002b94 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f005 f870 	bl	8007c64 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f002 fc15 	bl	80053c8 <USB_ReadInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d115      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f005 f860 	bl	8007c80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	e000      	b.n	8002bd4 <HAL_PCD_IRQHandler+0x938>
      return;
 8002bd2:	bf00      	nop
    }
  }
}
 8002bd4:	3734      	adds	r7, #52	; 0x34
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd90      	pop	{r4, r7, pc}

08002bda <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	460b      	mov	r3, r1
 8002be4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_PCD_SetAddress+0x1a>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e013      	b.n	8002c1c <HAL_PCD_SetAddress+0x42>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f002 fb73 	bl	80052f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	70fb      	strb	r3, [r7, #3]
 8002c36:	460b      	mov	r3, r1
 8002c38:	803b      	strh	r3, [r7, #0]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	da0f      	bge.n	8002c6a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	f003 020f 	and.w	r2, r3, #15
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	3338      	adds	r3, #56	; 0x38
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3304      	adds	r3, #4
 8002c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	705a      	strb	r2, [r3, #1]
 8002c68:	e00f      	b.n	8002c8a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	f003 020f 	and.w	r2, r3, #15
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4413      	add	r3, r2
 8002c80:	3304      	adds	r3, #4
 8002c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c96:	883a      	ldrh	r2, [r7, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	78ba      	ldrb	r2, [r7, #2]
 8002ca0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	785b      	ldrb	r3, [r3, #1]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d004      	beq.n	8002cb4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cb4:	78bb      	ldrb	r3, [r7, #2]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d102      	bne.n	8002cc0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_PCD_EP_Open+0xaa>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e00e      	b.n	8002cec <HAL_PCD_EP_Open+0xc8>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68f9      	ldr	r1, [r7, #12]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 fbf3 	bl	80044c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002cea:	7afb      	ldrb	r3, [r7, #11]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da0f      	bge.n	8002d28 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f003 020f 	and.w	r2, r3, #15
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	3338      	adds	r3, #56	; 0x38
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	705a      	strb	r2, [r3, #1]
 8002d26:	e00f      	b.n	8002d48 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3304      	adds	r3, #4
 8002d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_PCD_EP_Close+0x6e>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e00e      	b.n	8002d80 <HAL_PCD_EP_Close+0x8c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68f9      	ldr	r1, [r7, #12]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 fc31 	bl	80045d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	460b      	mov	r3, r1
 8002d96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d98:	7afb      	ldrb	r3, [r7, #11]
 8002d9a:	f003 020f 	and.w	r2, r3, #15
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4413      	add	r3, r2
 8002dae:	3304      	adds	r3, #4
 8002db0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d102      	bne.n	8002de4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002de4:	7afb      	ldrb	r3, [r7, #11]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6979      	ldr	r1, [r7, #20]
 8002dfc:	f001 ff10 	bl	8004c20 <USB_EP0StartXfer>
 8002e00:	e008      	b.n	8002e14 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6979      	ldr	r1, [r7, #20]
 8002e10:	f001 fcbe 	bl	8004790 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 020f 	and.w	r2, r3, #15
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002e40:	681b      	ldr	r3, [r3, #0]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b086      	sub	sp, #24
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e5e:	7afb      	ldrb	r3, [r7, #11]
 8002e60:	f003 020f 	and.w	r2, r3, #15
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	3338      	adds	r3, #56	; 0x38
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d102      	bne.n	8002ea8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ea8:	7afb      	ldrb	r3, [r7, #11]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6979      	ldr	r1, [r7, #20]
 8002ec0:	f001 feae 	bl	8004c20 <USB_EP0StartXfer>
 8002ec4:	e008      	b.n	8002ed8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	6979      	ldr	r1, [r7, #20]
 8002ed4:	f001 fc5c 	bl	8004790 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	460b      	mov	r3, r1
 8002eec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	f003 020f 	and.w	r2, r3, #15
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d901      	bls.n	8002f00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e050      	b.n	8002fa2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	da0f      	bge.n	8002f28 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	f003 020f 	and.w	r2, r3, #15
 8002f0e:	4613      	mov	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	3338      	adds	r3, #56	; 0x38
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	705a      	strb	r2, [r3, #1]
 8002f26:	e00d      	b.n	8002f44 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_PCD_EP_SetStall+0x82>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e01e      	b.n	8002fa2 <HAL_PCD_EP_SetStall+0xc0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68f9      	ldr	r1, [r7, #12]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f002 f8ec 	bl	8005150 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	b2d9      	uxtb	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f92:	461a      	mov	r2, r3
 8002f94:	f002 fadc 	bl	8005550 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	f003 020f 	and.w	r2, r3, #15
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d901      	bls.n	8002fc8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e042      	b.n	800304e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	da0f      	bge.n	8002ff0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	f003 020f 	and.w	r2, r3, #15
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	3338      	adds	r3, #56	; 0x38
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	705a      	strb	r2, [r3, #1]
 8002fee:	e00f      	b.n	8003010 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 020f 	and.w	r2, r3, #15
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	3304      	adds	r3, #4
 8003008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_PCD_EP_ClrStall+0x86>
 800302c:	2302      	movs	r3, #2
 800302e:	e00e      	b.n	800304e <HAL_PCD_EP_ClrStall+0xa4>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68f9      	ldr	r1, [r7, #12]
 800303e:	4618      	mov	r0, r3
 8003040:	f002 f8f4 	bl	800522c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003066:	2b00      	cmp	r3, #0
 8003068:	da0c      	bge.n	8003084 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	f003 020f 	and.w	r2, r3, #15
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	3338      	adds	r3, #56	; 0x38
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	3304      	adds	r3, #4
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	e00c      	b.n	800309e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	f003 020f 	and.w	r2, r3, #15
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	3304      	adds	r3, #4
 800309c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68f9      	ldr	r1, [r7, #12]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 ff13 	bl	8004ed0 <USB_EPStopXfer>
 80030aa:	4603      	mov	r3, r0
 80030ac:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030ae:	7afb      	ldrb	r3, [r7, #11]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	; 0x28
 80030bc:	af02      	add	r7, sp, #8
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	3338      	adds	r3, #56	; 0x38
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1a      	ldr	r2, [r3, #32]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d901      	bls.n	80030f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e06c      	b.n	80031ca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	429a      	cmp	r2, r3
 8003104:	d902      	bls.n	800310c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	3303      	adds	r3, #3
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003114:	e02b      	b.n	800316e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	429a      	cmp	r2, r3
 800312a:	d902      	bls.n	8003132 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3303      	adds	r3, #3
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6919      	ldr	r1, [r3, #16]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800314a:	b2db      	uxtb	r3, r3
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	4603      	mov	r3, r0
 8003150:	6978      	ldr	r0, [r7, #20]
 8003152:	f001 ff67 	bl	8005024 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	441a      	add	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a1a      	ldr	r2, [r3, #32]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	441a      	add	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	429a      	cmp	r2, r3
 8003182:	d809      	bhi.n	8003198 <PCD_WriteEmptyTxFifo+0xe0>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a1a      	ldr	r2, [r3, #32]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800318c:	429a      	cmp	r2, r3
 800318e:	d203      	bcs.n	8003198 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1be      	bne.n	8003116 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d811      	bhi.n	80031c8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	2201      	movs	r2, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	43db      	mvns	r3, r3
 80031be:	6939      	ldr	r1, [r7, #16]
 80031c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031c4:	4013      	ands	r3, r2
 80031c6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	333c      	adds	r3, #60	; 0x3c
 80031ec:	3304      	adds	r3, #4
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d17b      	bne.n	8003302 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d015      	beq.n	8003240 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	4a61      	ldr	r2, [pc, #388]	; (800339c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	f240 80b9 	bls.w	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80b3 	beq.w	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003236:	461a      	mov	r2, r3
 8003238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800323c:	6093      	str	r3, [r2, #8]
 800323e:	e0a7      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003256:	461a      	mov	r2, r3
 8003258:	2320      	movs	r3, #32
 800325a:	6093      	str	r3, [r2, #8]
 800325c:	e098      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	f040 8093 	bne.w	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	4a4b      	ldr	r2, [pc, #300]	; (800339c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d90f      	bls.n	8003292 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003288:	461a      	mov	r2, r3
 800328a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800328e:	6093      	str	r3, [r2, #8]
 8003290:	e07e      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	3304      	adds	r3, #4
 80032a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	0159      	lsls	r1, r3, #5
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	440b      	add	r3, r1
 80032b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032be:	1ad2      	subs	r2, r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d114      	bne.n	80032f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032dc:	461a      	mov	r2, r3
 80032de:	2101      	movs	r1, #1
 80032e0:	f002 f936 	bl	8005550 <USB_EP0_OutStart>
 80032e4:	e006      	b.n	80032f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	441a      	add	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f004 fbee 	bl	8007adc <HAL_PCD_DataOutStageCallback>
 8003300:	e046      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d124      	bne.n	8003354 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003320:	461a      	mov	r2, r3
 8003322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003326:	6093      	str	r3, [r2, #8]
 8003328:	e032      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003340:	461a      	mov	r2, r3
 8003342:	2320      	movs	r3, #32
 8003344:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f004 fbc5 	bl	8007adc <HAL_PCD_DataOutStageCallback>
 8003352:	e01d      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d114      	bne.n	8003384 <PCD_EP_OutXfrComplete_int+0x1b0>
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d108      	bne.n	8003384 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800337c:	461a      	mov	r2, r3
 800337e:	2100      	movs	r1, #0
 8003380:	f002 f8e6 	bl	8005550 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f004 fba6 	bl	8007adc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	4f54300a 	.word	0x4f54300a
 80033a0:	4f54310a 	.word	0x4f54310a

080033a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	333c      	adds	r3, #60	; 0x3c
 80033bc:	3304      	adds	r3, #4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a15      	ldr	r2, [pc, #84]	; (800342c <PCD_EP_OutSetupPacket_int+0x88>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d90e      	bls.n	80033f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f0:	461a      	mov	r2, r3
 80033f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f004 fb5d 	bl	8007ab8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a0a      	ldr	r2, [pc, #40]	; (800342c <PCD_EP_OutSetupPacket_int+0x88>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d90c      	bls.n	8003420 <PCD_EP_OutSetupPacket_int+0x7c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d108      	bne.n	8003420 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003418:	461a      	mov	r2, r3
 800341a:	2101      	movs	r1, #1
 800341c:	f002 f898 	bl	8005550 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	4f54300a 	.word	0x4f54300a

08003430 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
 800343c:	4613      	mov	r3, r2
 800343e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d107      	bne.n	800345e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800344e:	883b      	ldrh	r3, [r7, #0]
 8003450:	0419      	lsls	r1, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	430a      	orrs	r2, r1
 800345a:	629a      	str	r2, [r3, #40]	; 0x28
 800345c:	e028      	b.n	80034b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	4413      	add	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800346c:	2300      	movs	r3, #0
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	e00d      	b.n	800348e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	3340      	adds	r3, #64	; 0x40
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	4413      	add	r3, r2
 8003486:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	3301      	adds	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	3b01      	subs	r3, #1
 8003494:	429a      	cmp	r2, r3
 8003496:	d3ec      	bcc.n	8003472 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003498:	883b      	ldrh	r3, [r7, #0]
 800349a:	0418      	lsls	r0, r3, #16
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	4302      	orrs	r2, r0
 80034a8:	3340      	adds	r3, #64	; 0x40
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e267      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d075      	beq.n	8003602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003516:	4b88      	ldr	r3, [pc, #544]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b04      	cmp	r3, #4
 8003520:	d00c      	beq.n	800353c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003522:	4b85      	ldr	r3, [pc, #532]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800352a:	2b08      	cmp	r3, #8
 800352c:	d112      	bne.n	8003554 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352e:	4b82      	ldr	r3, [pc, #520]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353a:	d10b      	bne.n	8003554 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	4b7e      	ldr	r3, [pc, #504]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d05b      	beq.n	8003600 <HAL_RCC_OscConfig+0x108>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d157      	bne.n	8003600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e242      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d106      	bne.n	800356c <HAL_RCC_OscConfig+0x74>
 800355e:	4b76      	ldr	r3, [pc, #472]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a75      	ldr	r2, [pc, #468]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e01d      	b.n	80035a8 <HAL_RCC_OscConfig+0xb0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0x98>
 8003576:	4b70      	ldr	r3, [pc, #448]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6f      	ldr	r2, [pc, #444]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800357c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b6d      	ldr	r3, [pc, #436]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a6c      	ldr	r2, [pc, #432]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e00b      	b.n	80035a8 <HAL_RCC_OscConfig+0xb0>
 8003590:	4b69      	ldr	r3, [pc, #420]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a68      	ldr	r2, [pc, #416]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b66      	ldr	r3, [pc, #408]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a65      	ldr	r2, [pc, #404]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 80035a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d013      	beq.n	80035d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fd face 	bl	8000b50 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b8:	f7fd faca 	bl	8000b50 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	; 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e207      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	4b5b      	ldr	r3, [pc, #364]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0xc0>
 80035d6:	e014      	b.n	8003602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fd faba 	bl	8000b50 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e0:	f7fd fab6 	bl	8000b50 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e1f3      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	4b51      	ldr	r3, [pc, #324]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0xe8>
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d063      	beq.n	80036d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800360e:	4b4a      	ldr	r3, [pc, #296]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361a:	4b47      	ldr	r3, [pc, #284]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003622:	2b08      	cmp	r3, #8
 8003624:	d11c      	bne.n	8003660 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003626:	4b44      	ldr	r3, [pc, #272]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d116      	bne.n	8003660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	4b41      	ldr	r3, [pc, #260]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_RCC_OscConfig+0x152>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d001      	beq.n	800364a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e1c7      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364a:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4937      	ldr	r1, [pc, #220]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365e:	e03a      	b.n	80036d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003668:	4b34      	ldr	r3, [pc, #208]	; (800373c <HAL_RCC_OscConfig+0x244>)
 800366a:	2201      	movs	r2, #1
 800366c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fd fa6f 	bl	8000b50 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003676:	f7fd fa6b 	bl	8000b50 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e1a8      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003694:	4b28      	ldr	r3, [pc, #160]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4925      	ldr	r1, [pc, #148]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]
 80036a8:	e015      	b.n	80036d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036aa:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_RCC_OscConfig+0x244>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fd fa4e 	bl	8000b50 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b8:	f7fd fa4a 	bl	8000b50 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e187      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d036      	beq.n	8003750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d016      	beq.n	8003718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <HAL_RCC_OscConfig+0x248>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fd fa2e 	bl	8000b50 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f8:	f7fd fa2a 	bl	8000b50 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e167      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800370c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x200>
 8003716:	e01b      	b.n	8003750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003718:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_OscConfig+0x248>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371e:	f7fd fa17 	bl	8000b50 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	e00e      	b.n	8003744 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003726:	f7fd fa13 	bl	8000b50 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d907      	bls.n	8003744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e150      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
 8003738:	40023800 	.word	0x40023800
 800373c:	42470000 	.word	0x42470000
 8003740:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003744:	4b88      	ldr	r3, [pc, #544]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1ea      	bne.n	8003726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 8097 	beq.w	800388c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003762:	4b81      	ldr	r3, [pc, #516]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10f      	bne.n	800378e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	4b7d      	ldr	r3, [pc, #500]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	4a7c      	ldr	r2, [pc, #496]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377c:	6413      	str	r3, [r2, #64]	; 0x40
 800377e:	4b7a      	ldr	r3, [pc, #488]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	4b77      	ldr	r3, [pc, #476]	; (800396c <HAL_RCC_OscConfig+0x474>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d118      	bne.n	80037cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379a:	4b74      	ldr	r3, [pc, #464]	; (800396c <HAL_RCC_OscConfig+0x474>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a73      	ldr	r2, [pc, #460]	; (800396c <HAL_RCC_OscConfig+0x474>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a6:	f7fd f9d3 	bl	8000b50 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ae:	f7fd f9cf 	bl	8000b50 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e10c      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	4b6a      	ldr	r3, [pc, #424]	; (800396c <HAL_RCC_OscConfig+0x474>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x2ea>
 80037d4:	4b64      	ldr	r3, [pc, #400]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	4a63      	ldr	r2, [pc, #396]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6713      	str	r3, [r2, #112]	; 0x70
 80037e0:	e01c      	b.n	800381c <HAL_RCC_OscConfig+0x324>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x30c>
 80037ea:	4b5f      	ldr	r3, [pc, #380]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	4a5e      	ldr	r2, [pc, #376]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	6713      	str	r3, [r2, #112]	; 0x70
 80037f6:	4b5c      	ldr	r3, [pc, #368]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	4a5b      	ldr	r2, [pc, #364]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	6713      	str	r3, [r2, #112]	; 0x70
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0x324>
 8003804:	4b58      	ldr	r3, [pc, #352]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	4a57      	ldr	r2, [pc, #348]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	6713      	str	r3, [r2, #112]	; 0x70
 8003810:	4b55      	ldr	r3, [pc, #340]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	4a54      	ldr	r2, [pc, #336]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003816:	f023 0304 	bic.w	r3, r3, #4
 800381a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d015      	beq.n	8003850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7fd f994 	bl	8000b50 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382a:	e00a      	b.n	8003842 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	f7fd f990 	bl	8000b50 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	; 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0cb      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003842:	4b49      	ldr	r3, [pc, #292]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0ee      	beq.n	800382c <HAL_RCC_OscConfig+0x334>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003850:	f7fd f97e 	bl	8000b50 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003856:	e00a      	b.n	800386e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f7fd f97a 	bl	8000b50 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e0b5      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386e:	4b3e      	ldr	r3, [pc, #248]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1ee      	bne.n	8003858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003880:	4b39      	ldr	r3, [pc, #228]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	4a38      	ldr	r2, [pc, #224]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80a1 	beq.w	80039d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003896:	4b34      	ldr	r3, [pc, #208]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d05c      	beq.n	800395c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d141      	bne.n	800392e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038aa:	4b31      	ldr	r3, [pc, #196]	; (8003970 <HAL_RCC_OscConfig+0x478>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fd f94e 	bl	8000b50 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fd f94a 	bl	8000b50 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e087      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	4b27      	ldr	r3, [pc, #156]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	019b      	lsls	r3, r3, #6
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	085b      	lsrs	r3, r3, #1
 80038ee:	3b01      	subs	r3, #1
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	491b      	ldr	r1, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <HAL_RCC_OscConfig+0x478>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7fd f923 	bl	8000b50 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390e:	f7fd f91f 	bl	8000b50 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e05c      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x416>
 800392c:	e054      	b.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <HAL_RCC_OscConfig+0x478>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fd f90c 	bl	8000b50 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393c:	f7fd f908 	bl	8000b50 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e045      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x444>
 800395a:	e03d      	b.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e038      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
 8003968:	40023800 	.word	0x40023800
 800396c:	40007000 	.word	0x40007000
 8003970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003974:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <HAL_RCC_OscConfig+0x4ec>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d028      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800398c:	429a      	cmp	r2, r3
 800398e:	d121      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d11a      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d111      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	3b01      	subs	r3, #1
 80039be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d107      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800

080039e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0cc      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b68      	ldr	r3, [pc, #416]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d90c      	bls.n	8003a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b65      	ldr	r3, [pc, #404]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b63      	ldr	r3, [pc, #396]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0b8      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d020      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a3c:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a58      	ldr	r2, [pc, #352]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a54:	4b53      	ldr	r3, [pc, #332]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a52      	ldr	r2, [pc, #328]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a60:	4b50      	ldr	r3, [pc, #320]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	494d      	ldr	r1, [pc, #308]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d044      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b47      	ldr	r3, [pc, #284]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d119      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e07f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d003      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa6:	4b3f      	ldr	r3, [pc, #252]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e06f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e067      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac6:	4b37      	ldr	r3, [pc, #220]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4934      	ldr	r1, [pc, #208]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad8:	f7fd f83a 	bl	8000b50 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7fd f836 	bl	8000b50 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e04f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 020c 	and.w	r2, r3, #12
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d1eb      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b08:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d20c      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e032      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3c:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4916      	ldr	r1, [pc, #88]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	490e      	ldr	r1, [pc, #56]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b6e:	f000 f821 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	490a      	ldr	r1, [pc, #40]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	5ccb      	ldrb	r3, [r1, r3]
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
 8003b86:	4a09      	ldr	r2, [pc, #36]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fc ff9a 	bl	8000ac8 <HAL_InitTick>

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023c00 	.word	0x40023c00
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	080080f0 	.word	0x080080f0
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	20000004 	.word	0x20000004

08003bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb8:	b094      	sub	sp, #80	; 0x50
 8003bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bcc:	4b79      	ldr	r3, [pc, #484]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	f200 80e1 	bhi.w	8003da0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x34>
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d003      	beq.n	8003bee <HAL_RCC_GetSysClockFreq+0x3a>
 8003be6:	e0db      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be8:	4b73      	ldr	r3, [pc, #460]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003bec:	e0db      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bee:	4b73      	ldr	r3, [pc, #460]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x208>)
 8003bf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bf2:	e0d8      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf4:	4b6f      	ldr	r3, [pc, #444]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfe:	4b6d      	ldr	r3, [pc, #436]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d063      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0a:	4b6a      	ldr	r3, [pc, #424]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	2200      	movs	r2, #0
 8003c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c1e:	2300      	movs	r3, #0
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
 8003c22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c26:	4622      	mov	r2, r4
 8003c28:	462b      	mov	r3, r5
 8003c2a:	f04f 0000 	mov.w	r0, #0
 8003c2e:	f04f 0100 	mov.w	r1, #0
 8003c32:	0159      	lsls	r1, r3, #5
 8003c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c38:	0150      	lsls	r0, r2, #5
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4621      	mov	r1, r4
 8003c40:	1a51      	subs	r1, r2, r1
 8003c42:	6139      	str	r1, [r7, #16]
 8003c44:	4629      	mov	r1, r5
 8003c46:	eb63 0301 	sbc.w	r3, r3, r1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c58:	4659      	mov	r1, fp
 8003c5a:	018b      	lsls	r3, r1, #6
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c62:	4651      	mov	r1, sl
 8003c64:	018a      	lsls	r2, r1, #6
 8003c66:	4651      	mov	r1, sl
 8003c68:	ebb2 0801 	subs.w	r8, r2, r1
 8003c6c:	4659      	mov	r1, fp
 8003c6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c86:	4690      	mov	r8, r2
 8003c88:	4699      	mov	r9, r3
 8003c8a:	4623      	mov	r3, r4
 8003c8c:	eb18 0303 	adds.w	r3, r8, r3
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	462b      	mov	r3, r5
 8003c94:	eb49 0303 	adc.w	r3, r9, r3
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	024b      	lsls	r3, r1, #9
 8003caa:	4621      	mov	r1, r4
 8003cac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	024a      	lsls	r2, r1, #9
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cba:	2200      	movs	r2, #0
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cc4:	f7fc fa80 	bl	80001c8 <__aeabi_uldivmod>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4613      	mov	r3, r2
 8003cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd0:	e058      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd2:	4b38      	ldr	r3, [pc, #224]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	099b      	lsrs	r3, r3, #6
 8003cd8:	2200      	movs	r2, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	4611      	mov	r1, r2
 8003cde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cec:	4642      	mov	r2, r8
 8003cee:	464b      	mov	r3, r9
 8003cf0:	f04f 0000 	mov.w	r0, #0
 8003cf4:	f04f 0100 	mov.w	r1, #0
 8003cf8:	0159      	lsls	r1, r3, #5
 8003cfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cfe:	0150      	lsls	r0, r2, #5
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4641      	mov	r1, r8
 8003d06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d24:	ebb2 040a 	subs.w	r4, r2, sl
 8003d28:	eb63 050b 	sbc.w	r5, r3, fp
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	00eb      	lsls	r3, r5, #3
 8003d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d3a:	00e2      	lsls	r2, r4, #3
 8003d3c:	4614      	mov	r4, r2
 8003d3e:	461d      	mov	r5, r3
 8003d40:	4643      	mov	r3, r8
 8003d42:	18e3      	adds	r3, r4, r3
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	464b      	mov	r3, r9
 8003d48:	eb45 0303 	adc.w	r3, r5, r3
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	028b      	lsls	r3, r1, #10
 8003d5e:	4621      	mov	r1, r4
 8003d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d64:	4621      	mov	r1, r4
 8003d66:	028a      	lsls	r2, r1, #10
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	61fa      	str	r2, [r7, #28]
 8003d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d78:	f7fc fa26 	bl	80001c8 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4613      	mov	r3, r2
 8003d82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d9e:	e002      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003da2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3750      	adds	r7, #80	; 0x50
 8003dac:	46bd      	mov	sp, r7
 8003dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800
 8003db8:	00f42400 	.word	0x00f42400
 8003dbc:	007a1200 	.word	0x007a1200

08003dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc4:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20000000 	.word	0x20000000

08003dd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003dd8:	b084      	sub	sp, #16
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	f107 001c 	add.w	r0, r7, #28
 8003de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d122      	bne.n	8003e36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d105      	bne.n	8003e2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f001 fbee 	bl	800560c <USB_CoreReset>
 8003e30:	4603      	mov	r3, r0
 8003e32:	73fb      	strb	r3, [r7, #15]
 8003e34:	e01a      	b.n	8003e6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f001 fbe2 	bl	800560c <USB_CoreReset>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8003e5e:	e005      	b.n	8003e6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d10b      	bne.n	8003e8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f043 0206 	orr.w	r2, r3, #6
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e96:	b004      	add	sp, #16
 8003e98:	4770      	bx	lr
	...

08003e9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d165      	bne.n	8003f7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4a41      	ldr	r2, [pc, #260]	; (8003fb8 <USB_SetTurnaroundTime+0x11c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d906      	bls.n	8003ec6 <USB_SetTurnaroundTime+0x2a>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4a40      	ldr	r2, [pc, #256]	; (8003fbc <USB_SetTurnaroundTime+0x120>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d202      	bcs.n	8003ec6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ec0:	230f      	movs	r3, #15
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e062      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4a3c      	ldr	r2, [pc, #240]	; (8003fbc <USB_SetTurnaroundTime+0x120>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d306      	bcc.n	8003edc <USB_SetTurnaroundTime+0x40>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4a3b      	ldr	r2, [pc, #236]	; (8003fc0 <USB_SetTurnaroundTime+0x124>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d202      	bcs.n	8003edc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ed6:	230e      	movs	r3, #14
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	e057      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4a38      	ldr	r2, [pc, #224]	; (8003fc0 <USB_SetTurnaroundTime+0x124>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d306      	bcc.n	8003ef2 <USB_SetTurnaroundTime+0x56>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4a37      	ldr	r2, [pc, #220]	; (8003fc4 <USB_SetTurnaroundTime+0x128>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d202      	bcs.n	8003ef2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003eec:	230d      	movs	r3, #13
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	e04c      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4a33      	ldr	r2, [pc, #204]	; (8003fc4 <USB_SetTurnaroundTime+0x128>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d306      	bcc.n	8003f08 <USB_SetTurnaroundTime+0x6c>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4a32      	ldr	r2, [pc, #200]	; (8003fc8 <USB_SetTurnaroundTime+0x12c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d802      	bhi.n	8003f08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f02:	230c      	movs	r3, #12
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e041      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4a2f      	ldr	r2, [pc, #188]	; (8003fc8 <USB_SetTurnaroundTime+0x12c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d906      	bls.n	8003f1e <USB_SetTurnaroundTime+0x82>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4a2e      	ldr	r2, [pc, #184]	; (8003fcc <USB_SetTurnaroundTime+0x130>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d802      	bhi.n	8003f1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f18:	230b      	movs	r3, #11
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	e036      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4a2a      	ldr	r2, [pc, #168]	; (8003fcc <USB_SetTurnaroundTime+0x130>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d906      	bls.n	8003f34 <USB_SetTurnaroundTime+0x98>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4a29      	ldr	r2, [pc, #164]	; (8003fd0 <USB_SetTurnaroundTime+0x134>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d802      	bhi.n	8003f34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f2e:	230a      	movs	r3, #10
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	e02b      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4a26      	ldr	r2, [pc, #152]	; (8003fd0 <USB_SetTurnaroundTime+0x134>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d906      	bls.n	8003f4a <USB_SetTurnaroundTime+0xae>
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4a25      	ldr	r2, [pc, #148]	; (8003fd4 <USB_SetTurnaroundTime+0x138>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d202      	bcs.n	8003f4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f44:	2309      	movs	r3, #9
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	e020      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <USB_SetTurnaroundTime+0x138>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d306      	bcc.n	8003f60 <USB_SetTurnaroundTime+0xc4>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4a20      	ldr	r2, [pc, #128]	; (8003fd8 <USB_SetTurnaroundTime+0x13c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d802      	bhi.n	8003f60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	e015      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <USB_SetTurnaroundTime+0x13c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d906      	bls.n	8003f76 <USB_SetTurnaroundTime+0xda>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <USB_SetTurnaroundTime+0x140>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d202      	bcs.n	8003f76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003f70:	2307      	movs	r3, #7
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	e00a      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003f76:	2306      	movs	r3, #6
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	e007      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d102      	bne.n	8003f88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003f82:	2309      	movs	r3, #9
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e001      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f88:	2309      	movs	r3, #9
 8003f8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	029b      	lsls	r3, r3, #10
 8003fa0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	00d8acbf 	.word	0x00d8acbf
 8003fbc:	00e4e1c0 	.word	0x00e4e1c0
 8003fc0:	00f42400 	.word	0x00f42400
 8003fc4:	01067380 	.word	0x01067380
 8003fc8:	011a499f 	.word	0x011a499f
 8003fcc:	01312cff 	.word	0x01312cff
 8003fd0:	014ca43f 	.word	0x014ca43f
 8003fd4:	016e3600 	.word	0x016e3600
 8003fd8:	01a6ab1f 	.word	0x01a6ab1f
 8003fdc:	01e84800 	.word	0x01e84800

08003fe0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f043 0201 	orr.w	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f023 0201 	bic.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d115      	bne.n	8004072 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004052:	2001      	movs	r0, #1
 8004054:	f7fc fd88 	bl	8000b68 <HAL_Delay>
      ms++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f001 fa45 	bl	80054ee <USB_GetMode>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d01e      	beq.n	80040a8 <USB_SetCurrentMode+0x84>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b31      	cmp	r3, #49	; 0x31
 800406e:	d9f0      	bls.n	8004052 <USB_SetCurrentMode+0x2e>
 8004070:	e01a      	b.n	80040a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d115      	bne.n	80040a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004084:	2001      	movs	r0, #1
 8004086:	f7fc fd6f 	bl	8000b68 <HAL_Delay>
      ms++;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3301      	adds	r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f001 fa2c 	bl	80054ee <USB_GetMode>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <USB_SetCurrentMode+0x84>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b31      	cmp	r3, #49	; 0x31
 80040a0:	d9f0      	bls.n	8004084 <USB_SetCurrentMode+0x60>
 80040a2:	e001      	b.n	80040a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e005      	b.n	80040b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b32      	cmp	r3, #50	; 0x32
 80040ac:	d101      	bne.n	80040b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040bc:	b084      	sub	sp, #16
 80040be:	b580      	push	{r7, lr}
 80040c0:	b086      	sub	sp, #24
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	e009      	b.n	80040f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	3340      	adds	r3, #64	; 0x40
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	2200      	movs	r2, #0
 80040e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	3301      	adds	r3, #1
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b0e      	cmp	r3, #14
 80040f4:	d9f2      	bls.n	80040dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80040f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d11c      	bne.n	8004136 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800410a:	f043 0302 	orr.w	r3, r3, #2
 800410e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
 8004134:	e00b      	b.n	800414e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004154:	461a      	mov	r2, r3
 8004156:	2300      	movs	r3, #0
 8004158:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004160:	4619      	mov	r1, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004168:	461a      	mov	r2, r3
 800416a:	680b      	ldr	r3, [r1, #0]
 800416c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10c      	bne.n	800418e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d104      	bne.n	8004184 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800417a:	2100      	movs	r1, #0
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f965 	bl	800444c <USB_SetDevSpeed>
 8004182:	e008      	b.n	8004196 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004184:	2101      	movs	r1, #1
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f960 	bl	800444c <USB_SetDevSpeed>
 800418c:	e003      	b.n	8004196 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800418e:	2103      	movs	r1, #3
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f95b 	bl	800444c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004196:	2110      	movs	r1, #16
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f8f3 	bl	8004384 <USB_FlushTxFifo>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f91f 	bl	80043ec <USB_FlushRxFifo>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041be:	461a      	mov	r2, r3
 80041c0:	2300      	movs	r3, #0
 80041c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ca:	461a      	mov	r2, r3
 80041cc:	2300      	movs	r3, #0
 80041ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d6:	461a      	mov	r2, r3
 80041d8:	2300      	movs	r3, #0
 80041da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	e043      	b.n	800426a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041f8:	d118      	bne.n	800422c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420c:	461a      	mov	r2, r3
 800420e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	e013      	b.n	800423e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004222:	461a      	mov	r2, r3
 8004224:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e008      	b.n	800423e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004238:	461a      	mov	r2, r3
 800423a:	2300      	movs	r3, #0
 800423c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424a:	461a      	mov	r2, r3
 800424c:	2300      	movs	r3, #0
 800424e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425c:	461a      	mov	r2, r3
 800425e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004262:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	3301      	adds	r3, #1
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	429a      	cmp	r2, r3
 8004270:	d3b7      	bcc.n	80041e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	e043      	b.n	8004300 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800428a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800428e:	d118      	bne.n	80042c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10a      	bne.n	80042ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a2:	461a      	mov	r2, r3
 80042a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	e013      	b.n	80042d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b8:	461a      	mov	r2, r3
 80042ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	e008      	b.n	80042d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ce:	461a      	mov	r2, r3
 80042d0:	2300      	movs	r3, #0
 80042d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	461a      	mov	r2, r3
 80042e2:	2300      	movs	r3, #0
 80042e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f2:	461a      	mov	r2, r3
 80042f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	3301      	adds	r3, #1
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	429a      	cmp	r2, r3
 8004306:	d3b7      	bcc.n	8004278 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800431a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004328:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f043 0210 	orr.w	r2, r3, #16
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <USB_DevInit+0x2c4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f043 0208 	orr.w	r2, r3, #8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800435a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d107      	bne.n	8004370 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004368:	f043 0304 	orr.w	r3, r3, #4
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004370:	7dfb      	ldrb	r3, [r7, #23]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800437c:	b004      	add	sp, #16
 800437e:	4770      	bx	lr
 8004380:	803c3800 	.word	0x803c3800

08004384 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3301      	adds	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <USB_FlushTxFifo+0x64>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d901      	bls.n	80043a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e01b      	b.n	80043dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	daf2      	bge.n	8004392 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	019b      	lsls	r3, r3, #6
 80043b4:	f043 0220 	orr.w	r2, r3, #32
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3301      	adds	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4a08      	ldr	r2, [pc, #32]	; (80043e8 <USB_FlushTxFifo+0x64>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e006      	b.n	80043dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d0f0      	beq.n	80043bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	00030d40 	.word	0x00030d40

080043ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a11      	ldr	r2, [pc, #68]	; (8004448 <USB_FlushRxFifo+0x5c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e018      	b.n	800443c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	daf2      	bge.n	80043f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2210      	movs	r2, #16
 800441a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3301      	adds	r3, #1
 8004420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a08      	ldr	r2, [pc, #32]	; (8004448 <USB_FlushRxFifo+0x5c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e006      	b.n	800443c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b10      	cmp	r3, #16
 8004438:	d0f0      	beq.n	800441c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	00030d40 	.word	0x00030d40

0800444c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	68f9      	ldr	r1, [r7, #12]
 8004468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800447e:	b480      	push	{r7}
 8004480:	b087      	sub	sp, #28
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 0306 	and.w	r3, r3, #6
 8004496:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800449e:	2300      	movs	r3, #0
 80044a0:	75fb      	strb	r3, [r7, #23]
 80044a2:	e00a      	b.n	80044ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d002      	beq.n	80044b0 <USB_GetDevSpeed+0x32>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b06      	cmp	r3, #6
 80044ae:	d102      	bne.n	80044b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044b0:	2302      	movs	r3, #2
 80044b2:	75fb      	strb	r3, [r7, #23]
 80044b4:	e001      	b.n	80044ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044b6:	230f      	movs	r3, #15
 80044b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	785b      	ldrb	r3, [r3, #1]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d13a      	bne.n	800455a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	2101      	movs	r1, #1
 80044f6:	fa01 f303 	lsl.w	r3, r1, r3
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	68f9      	ldr	r1, [r7, #12]
 80044fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004502:	4313      	orrs	r3, r2
 8004504:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d155      	bne.n	80045c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	791b      	ldrb	r3, [r3, #4]
 8004536:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004538:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	059b      	lsls	r3, r3, #22
 800453e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004540:	4313      	orrs	r3, r2
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	0151      	lsls	r1, r2, #5
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	440a      	add	r2, r1
 800454a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800454e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	e036      	b.n	80045c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	2101      	movs	r1, #1
 800456c:	fa01 f303 	lsl.w	r3, r1, r3
 8004570:	041b      	lsls	r3, r3, #16
 8004572:	68f9      	ldr	r1, [r7, #12]
 8004574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004578:	4313      	orrs	r3, r2
 800457a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d11a      	bne.n	80045c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	791b      	ldrb	r3, [r3, #4]
 80045ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045ae:	430b      	orrs	r3, r1
 80045b0:	4313      	orrs	r3, r2
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
	...

080045d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	785b      	ldrb	r3, [r3, #1]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d161      	bne.n	80046b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800460a:	d11f      	bne.n	800464c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	0151      	lsls	r1, r2, #5
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	440a      	add	r2, r1
 8004622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004626:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800462a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	0151      	lsls	r1, r2, #5
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	440a      	add	r2, r1
 8004642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004646:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800464a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	2101      	movs	r1, #1
 800465e:	fa01 f303 	lsl.w	r3, r1, r3
 8004662:	b29b      	uxth	r3, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	68f9      	ldr	r1, [r7, #12]
 8004668:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800466c:	4013      	ands	r3, r2
 800466e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	2101      	movs	r1, #1
 8004682:	fa01 f303 	lsl.w	r3, r1, r3
 8004686:	b29b      	uxth	r3, r3
 8004688:	43db      	mvns	r3, r3
 800468a:	68f9      	ldr	r1, [r7, #12]
 800468c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004690:	4013      	ands	r3, r2
 8004692:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	0159      	lsls	r1, r3, #5
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	440b      	add	r3, r1
 80046aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ae:	4619      	mov	r1, r3
 80046b0:	4b35      	ldr	r3, [pc, #212]	; (8004788 <USB_DeactivateEndpoint+0x1b0>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]
 80046b6:	e060      	b.n	800477a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ce:	d11f      	bne.n	8004710 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	440a      	add	r2, r1
 8004706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800470a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800470e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	2101      	movs	r1, #1
 8004722:	fa01 f303 	lsl.w	r3, r1, r3
 8004726:	041b      	lsls	r3, r3, #16
 8004728:	43db      	mvns	r3, r3
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004730:	4013      	ands	r3, r2
 8004732:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	2101      	movs	r1, #1
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	43db      	mvns	r3, r3
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004754:	4013      	ands	r3, r2
 8004756:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	0159      	lsls	r1, r3, #5
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	440b      	add	r3, r1
 800476e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004772:	4619      	mov	r1, r3
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <USB_DeactivateEndpoint+0x1b4>)
 8004776:	4013      	ands	r3, r2
 8004778:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	ec337800 	.word	0xec337800
 800478c:	eff37800 	.word	0xeff37800

08004790 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	; 0x28
 8004794:	af02      	add	r7, sp, #8
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	4613      	mov	r3, r2
 800479c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	785b      	ldrb	r3, [r3, #1]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	f040 815c 	bne.w	8004a6a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d132      	bne.n	8004820 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	0151      	lsls	r1, r2, #5
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	440a      	add	r2, r1
 80047d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	0151      	lsls	r1, r2, #5
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	440a      	add	r2, r1
 80047f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	440a      	add	r2, r1
 8004814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004818:	0cdb      	lsrs	r3, r3, #19
 800481a:	04db      	lsls	r3, r3, #19
 800481c:	6113      	str	r3, [r2, #16]
 800481e:	e074      	b.n	800490a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	0151      	lsls	r1, r2, #5
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	440a      	add	r2, r1
 8004836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483a:	0cdb      	lsrs	r3, r3, #19
 800483c:	04db      	lsls	r3, r3, #19
 800483e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	0151      	lsls	r1, r2, #5
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	440a      	add	r2, r1
 8004856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800485e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004862:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004870:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	6999      	ldr	r1, [r3, #24]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	440b      	add	r3, r1
 800487c:	1e59      	subs	r1, r3, #1
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	fbb1 f3f3 	udiv	r3, r1, r3
 8004886:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004888:	4b9d      	ldr	r3, [pc, #628]	; (8004b00 <USB_EPStartXfer+0x370>)
 800488a:	400b      	ands	r3, r1
 800488c:	69b9      	ldr	r1, [r7, #24]
 800488e:	0148      	lsls	r0, r1, #5
 8004890:	69f9      	ldr	r1, [r7, #28]
 8004892:	4401      	add	r1, r0
 8004894:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004898:	4313      	orrs	r3, r2
 800489a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b2:	69b9      	ldr	r1, [r7, #24]
 80048b4:	0148      	lsls	r0, r1, #5
 80048b6:	69f9      	ldr	r1, [r7, #28]
 80048b8:	4401      	add	r1, r0
 80048ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048be:	4313      	orrs	r3, r2
 80048c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	791b      	ldrb	r3, [r3, #4]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d11f      	bne.n	800490a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	0151      	lsls	r1, r2, #5
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	440a      	add	r2, r1
 80048e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80048e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	0151      	lsls	r1, r2, #5
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	440a      	add	r2, r1
 8004900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004904:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004908:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d14b      	bne.n	80049a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d009      	beq.n	800492c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004924:	461a      	mov	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	791b      	ldrb	r3, [r3, #4]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d128      	bne.n	8004986 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d110      	bne.n	8004966 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	0151      	lsls	r1, r2, #5
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	440a      	add	r2, r1
 800495a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	e00f      	b.n	8004986 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	0151      	lsls	r1, r2, #5
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	440a      	add	r2, r1
 800497c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004984:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	0151      	lsls	r1, r2, #5
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	440a      	add	r2, r1
 800499c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	e133      	b.n	8004c10 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	0151      	lsls	r1, r2, #5
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	440a      	add	r2, r1
 80049be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	791b      	ldrb	r3, [r3, #4]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d015      	beq.n	80049fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 811b 	beq.w	8004c10 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	2101      	movs	r1, #1
 80049ec:	fa01 f303 	lsl.w	r3, r1, r3
 80049f0:	69f9      	ldr	r1, [r7, #28]
 80049f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049f6:	4313      	orrs	r3, r2
 80049f8:	634b      	str	r3, [r1, #52]	; 0x34
 80049fa:	e109      	b.n	8004c10 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d110      	bne.n	8004a2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	e00f      	b.n	8004a4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	0151      	lsls	r1, r2, #5
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	440a      	add	r2, r1
 8004a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	6919      	ldr	r1, [r3, #16]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	781a      	ldrb	r2, [r3, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	b298      	uxth	r0, r3
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	4603      	mov	r3, r0
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fade 	bl	8005024 <USB_WritePacket>
 8004a68:	e0d2      	b.n	8004c10 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	0151      	lsls	r1, r2, #5
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	440a      	add	r2, r1
 8004a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a84:	0cdb      	lsrs	r3, r3, #19
 8004a86:	04db      	lsls	r3, r3, #19
 8004a88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	0151      	lsls	r1, r2, #5
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	440a      	add	r2, r1
 8004aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004aa8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004aac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d126      	bne.n	8004b04 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004acc:	69b9      	ldr	r1, [r7, #24]
 8004ace:	0148      	lsls	r0, r1, #5
 8004ad0:	69f9      	ldr	r1, [r7, #28]
 8004ad2:	4401      	add	r1, r0
 8004ad4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004afa:	6113      	str	r3, [r2, #16]
 8004afc:	e03a      	b.n	8004b74 <USB_EPStartXfer+0x3e4>
 8004afe:	bf00      	nop
 8004b00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	699a      	ldr	r2, [r3, #24]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	1e5a      	subs	r2, r3, #1
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	8afa      	ldrh	r2, [r7, #22]
 8004b20:	fb03 f202 	mul.w	r2, r3, r2
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b34:	691a      	ldr	r2, [r3, #16]
 8004b36:	8afb      	ldrh	r3, [r7, #22]
 8004b38:	04d9      	lsls	r1, r3, #19
 8004b3a:	4b38      	ldr	r3, [pc, #224]	; (8004c1c <USB_EPStartXfer+0x48c>)
 8004b3c:	400b      	ands	r3, r1
 8004b3e:	69b9      	ldr	r1, [r7, #24]
 8004b40:	0148      	lsls	r0, r1, #5
 8004b42:	69f9      	ldr	r1, [r7, #28]
 8004b44:	4401      	add	r1, r0
 8004b46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b64:	69b9      	ldr	r1, [r7, #24]
 8004b66:	0148      	lsls	r0, r1, #5
 8004b68:	69f9      	ldr	r1, [r7, #28]
 8004b6a:	4401      	add	r1, r0
 8004b6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b70:	4313      	orrs	r3, r2
 8004b72:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d10d      	bne.n	8004b96 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	6919      	ldr	r1, [r3, #16]
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b92:	460a      	mov	r2, r1
 8004b94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	791b      	ldrb	r3, [r3, #4]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d128      	bne.n	8004bf0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d110      	bne.n	8004bd0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	0151      	lsls	r1, r2, #5
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	440a      	add	r2, r1
 8004bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	e00f      	b.n	8004bf0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	0151      	lsls	r1, r2, #5
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	440a      	add	r2, r1
 8004c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	1ff80000 	.word	0x1ff80000

08004c20 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	785b      	ldrb	r3, [r3, #1]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	f040 80ce 	bne.w	8004dde <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d132      	bne.n	8004cb0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	0151      	lsls	r1, r2, #5
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	440a      	add	r2, r1
 8004c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	0151      	lsls	r1, r2, #5
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	440a      	add	r2, r1
 8004c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	0151      	lsls	r1, r2, #5
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	440a      	add	r2, r1
 8004ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca8:	0cdb      	lsrs	r3, r3, #19
 8004caa:	04db      	lsls	r3, r3, #19
 8004cac:	6113      	str	r3, [r2, #16]
 8004cae:	e04e      	b.n	8004d4e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	0151      	lsls	r1, r2, #5
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	440a      	add	r2, r1
 8004cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cca:	0cdb      	lsrs	r3, r3, #19
 8004ccc:	04db      	lsls	r3, r3, #19
 8004cce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	0151      	lsls	r1, r2, #5
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	440a      	add	r2, r1
 8004ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cf2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d903      	bls.n	8004d08 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	0151      	lsls	r1, r2, #5
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	440a      	add	r2, r1
 8004d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d3e:	6939      	ldr	r1, [r7, #16]
 8004d40:	0148      	lsls	r0, r1, #5
 8004d42:	6979      	ldr	r1, [r7, #20]
 8004d44:	4401      	add	r1, r0
 8004d46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d11e      	bne.n	8004d92 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d009      	beq.n	8004d70 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	461a      	mov	r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	e097      	b.n	8004ec2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004db0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 8083 	beq.w	8004ec2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	f003 030f 	and.w	r3, r3, #15
 8004dcc:	2101      	movs	r1, #1
 8004dce:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd2:	6979      	ldr	r1, [r7, #20]
 8004dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	634b      	str	r3, [r1, #52]	; 0x34
 8004ddc:	e071      	b.n	8004ec2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	0151      	lsls	r1, r2, #5
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	440a      	add	r2, r1
 8004df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df8:	0cdb      	lsrs	r3, r3, #19
 8004dfa:	04db      	lsls	r3, r3, #19
 8004dfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e70:	6939      	ldr	r1, [r7, #16]
 8004e72:	0148      	lsls	r0, r1, #5
 8004e74:	6979      	ldr	r1, [r7, #20]
 8004e76:	4401      	add	r1, r0
 8004e78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d10d      	bne.n	8004ea2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	6919      	ldr	r1, [r3, #16]
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9e:	460a      	mov	r2, r1
 8004ea0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	0151      	lsls	r1, r2, #5
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	440a      	add	r2, r1
 8004eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ebc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ec0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	785b      	ldrb	r3, [r3, #1]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d14a      	bne.n	8004f84 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f06:	f040 8086 	bne.w	8005016 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	7812      	ldrb	r2, [r2, #0]
 8004f1e:	0151      	lsls	r1, r2, #5
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	440a      	add	r2, r1
 8004f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f2c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	7812      	ldrb	r2, [r2, #0]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3301      	adds	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d902      	bls.n	8004f68 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	75fb      	strb	r3, [r7, #23]
          break;
 8004f66:	e056      	b.n	8005016 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f80:	d0e7      	beq.n	8004f52 <USB_EPStopXfer+0x82>
 8004f82:	e048      	b.n	8005016 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f9c:	d13b      	bne.n	8005016 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	7812      	ldrb	r2, [r2, #0]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fc0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	7812      	ldrb	r2, [r2, #0]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fe4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d902      	bls.n	8004ffc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	75fb      	strb	r3, [r7, #23]
          break;
 8004ffa:	e00c      	b.n	8005016 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005014:	d0e7      	beq.n	8004fe6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005016:	7dfb      	ldrb	r3, [r7, #23]
}
 8005018:	4618      	mov	r0, r3
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005024:	b480      	push	{r7}
 8005026:	b089      	sub	sp, #36	; 0x24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	4611      	mov	r1, r2
 8005030:	461a      	mov	r2, r3
 8005032:	460b      	mov	r3, r1
 8005034:	71fb      	strb	r3, [r7, #7]
 8005036:	4613      	mov	r3, r2
 8005038:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005042:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005046:	2b00      	cmp	r3, #0
 8005048:	d123      	bne.n	8005092 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800504a:	88bb      	ldrh	r3, [r7, #4]
 800504c:	3303      	adds	r3, #3
 800504e:	089b      	lsrs	r3, r3, #2
 8005050:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005052:	2300      	movs	r3, #0
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	e018      	b.n	800508a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	031a      	lsls	r2, r3, #12
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4413      	add	r3, r2
 8005060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005064:	461a      	mov	r2, r3
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	3301      	adds	r3, #1
 8005070:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3301      	adds	r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	3301      	adds	r3, #1
 800507c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3301      	adds	r3, #1
 8005082:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	3301      	adds	r3, #1
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	429a      	cmp	r2, r3
 8005090:	d3e2      	bcc.n	8005058 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3724      	adds	r7, #36	; 0x24
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b08b      	sub	sp, #44	; 0x2c
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	089b      	lsrs	r3, r3, #2
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050c6:	2300      	movs	r3, #0
 80050c8:	623b      	str	r3, [r7, #32]
 80050ca:	e014      	b.n	80050f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	3301      	adds	r3, #1
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	3301      	adds	r3, #1
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	3301      	adds	r3, #1
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	3301      	adds	r3, #1
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	3301      	adds	r3, #1
 80050f4:	623b      	str	r3, [r7, #32]
 80050f6:	6a3a      	ldr	r2, [r7, #32]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d3e6      	bcc.n	80050cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050fe:	8bfb      	ldrh	r3, [r7, #30]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01e      	beq.n	8005142 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800510e:	461a      	mov	r2, r3
 8005110:	f107 0310 	add.w	r3, r7, #16
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	fa22 f303 	lsr.w	r3, r2, r3
 8005124:	b2da      	uxtb	r2, r3
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	701a      	strb	r2, [r3, #0]
      i++;
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	3301      	adds	r3, #1
 800512e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	3301      	adds	r3, #1
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005136:	8bfb      	ldrh	r3, [r7, #30]
 8005138:	3b01      	subs	r3, #1
 800513a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800513c:	8bfb      	ldrh	r3, [r7, #30]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1ea      	bne.n	8005118 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005144:	4618      	mov	r0, r3
 8005146:	372c      	adds	r7, #44	; 0x2c
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	785b      	ldrb	r3, [r3, #1]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d12c      	bne.n	80051c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	db12      	blt.n	80051a4 <USB_EPSetStall+0x54>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00f      	beq.n	80051a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	0151      	lsls	r1, r2, #5
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	440a      	add	r2, r1
 800519a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	0151      	lsls	r1, r2, #5
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	440a      	add	r2, r1
 80051ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	e02b      	b.n	800521e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	db12      	blt.n	80051fe <USB_EPSetStall+0xae>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00f      	beq.n	80051fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005218:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800521c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d128      	bne.n	800529a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	440a      	add	r2, r1
 800525e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005262:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005266:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	791b      	ldrb	r3, [r3, #4]
 800526c:	2b03      	cmp	r3, #3
 800526e:	d003      	beq.n	8005278 <USB_EPClearStall+0x4c>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	791b      	ldrb	r3, [r3, #4]
 8005274:	2b02      	cmp	r3, #2
 8005276:	d138      	bne.n	80052ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	440a      	add	r2, r1
 800528e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	e027      	b.n	80052ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	0151      	lsls	r1, r2, #5
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	440a      	add	r2, r1
 80052b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	791b      	ldrb	r3, [r3, #4]
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d003      	beq.n	80052ca <USB_EPClearStall+0x9e>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	791b      	ldrb	r3, [r3, #4]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d10f      	bne.n	80052ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	0151      	lsls	r1, r2, #5
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	440a      	add	r2, r1
 80052e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005316:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800531a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800532c:	68f9      	ldr	r1, [r7, #12]
 800532e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005332:	4313      	orrs	r3, r2
 8005334:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800535e:	f023 0303 	bic.w	r3, r3, #3
 8005362:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005372:	f023 0302 	bic.w	r3, r3, #2
 8005376:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053a0:	f023 0303 	bic.w	r3, r3, #3
 80053a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b4:	f043 0302 	orr.w	r3, r3, #2
 80053b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4013      	ands	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053e0:	68fb      	ldr	r3, [r7, #12]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	0c1b      	lsrs	r3, r3, #16
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	4013      	ands	r3, r2
 8005444:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	b29b      	uxth	r3, r3
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	460b      	mov	r3, r1
 8005460:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4013      	ands	r3, r2
 8005482:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005484:	68bb      	ldr	r3, [r7, #8]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005492:	b480      	push	{r7}
 8005494:	b087      	sub	sp, #28
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	460b      	mov	r3, r1
 800549c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054b6:	78fb      	ldrb	r3, [r7, #3]
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	fa22 f303 	lsr.w	r3, r2, r3
 80054c2:	01db      	lsls	r3, r3, #7
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4013      	ands	r3, r2
 80054de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054e0:	68bb      	ldr	r3, [r7, #8]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	f003 0301 	and.w	r3, r3, #1
}
 80054fe:	4618      	mov	r0, r3
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800550a:	b480      	push	{r7}
 800550c:	b085      	sub	sp, #20
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005524:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005528:	f023 0307 	bic.w	r3, r3, #7
 800552c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800553c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005540:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	460b      	mov	r3, r1
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	333c      	adds	r3, #60	; 0x3c
 8005566:	3304      	adds	r3, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	4a26      	ldr	r2, [pc, #152]	; (8005608 <USB_EP0_OutStart+0xb8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d90a      	bls.n	800558a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005584:	d101      	bne.n	800558a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	e037      	b.n	80055fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	461a      	mov	r2, r3
 8005592:	2300      	movs	r3, #0
 8005594:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b8:	f043 0318 	orr.w	r3, r3, #24
 80055bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055d2:	7afb      	ldrb	r3, [r7, #11]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d10f      	bne.n	80055f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055de:	461a      	mov	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80055f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	4f54300a 	.word	0x4f54300a

0800560c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4a13      	ldr	r2, [pc, #76]	; (8005670 <USB_CoreReset+0x64>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e01b      	b.n	8005662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	daf2      	bge.n	8005618 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f043 0201 	orr.w	r2, r3, #1
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3301      	adds	r3, #1
 8005646:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4a09      	ldr	r2, [pc, #36]	; (8005670 <USB_CoreReset+0x64>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d901      	bls.n	8005654 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e006      	b.n	8005662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b01      	cmp	r3, #1
 800565e:	d0f0      	beq.n	8005642 <USB_CoreReset+0x36>

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	00030d40 	.word	0x00030d40

08005674 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005680:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005684:	f002 fc94 	bl	8007fb0 <USBD_static_malloc>
 8005688:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d109      	bne.n	80056a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	32b0      	adds	r2, #176	; 0xb0
 800569a:	2100      	movs	r1, #0
 800569c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80056a0:	2302      	movs	r3, #2
 80056a2:	e0d4      	b.n	800584e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80056a4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80056a8:	2100      	movs	r1, #0
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f002 fcc4 	bl	8008038 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	32b0      	adds	r2, #176	; 0xb0
 80056ba:	68f9      	ldr	r1, [r7, #12]
 80056bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	32b0      	adds	r2, #176	; 0xb0
 80056ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	7c1b      	ldrb	r3, [r3, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d138      	bne.n	800574e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80056dc:	4b5e      	ldr	r3, [pc, #376]	; (8005858 <USBD_CDC_Init+0x1e4>)
 80056de:	7819      	ldrb	r1, [r3, #0]
 80056e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056e4:	2202      	movs	r2, #2
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f002 fb3f 	bl	8007d6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80056ec:	4b5a      	ldr	r3, [pc, #360]	; (8005858 <USBD_CDC_Init+0x1e4>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	f003 020f 	and.w	r2, r3, #15
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	3324      	adds	r3, #36	; 0x24
 8005702:	2201      	movs	r2, #1
 8005704:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005706:	4b55      	ldr	r3, [pc, #340]	; (800585c <USBD_CDC_Init+0x1e8>)
 8005708:	7819      	ldrb	r1, [r3, #0]
 800570a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800570e:	2202      	movs	r2, #2
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f002 fb2a 	bl	8007d6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005716:	4b51      	ldr	r3, [pc, #324]	; (800585c <USBD_CDC_Init+0x1e8>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	f003 020f 	and.w	r2, r3, #15
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800572e:	2201      	movs	r2, #1
 8005730:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005732:	4b4b      	ldr	r3, [pc, #300]	; (8005860 <USBD_CDC_Init+0x1ec>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	f003 020f 	and.w	r2, r3, #15
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	3326      	adds	r3, #38	; 0x26
 8005748:	2210      	movs	r2, #16
 800574a:	801a      	strh	r2, [r3, #0]
 800574c:	e035      	b.n	80057ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800574e:	4b42      	ldr	r3, [pc, #264]	; (8005858 <USBD_CDC_Init+0x1e4>)
 8005750:	7819      	ldrb	r1, [r3, #0]
 8005752:	2340      	movs	r3, #64	; 0x40
 8005754:	2202      	movs	r2, #2
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f002 fb07 	bl	8007d6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800575c:	4b3e      	ldr	r3, [pc, #248]	; (8005858 <USBD_CDC_Init+0x1e4>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	f003 020f 	and.w	r2, r3, #15
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	3324      	adds	r3, #36	; 0x24
 8005772:	2201      	movs	r2, #1
 8005774:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005776:	4b39      	ldr	r3, [pc, #228]	; (800585c <USBD_CDC_Init+0x1e8>)
 8005778:	7819      	ldrb	r1, [r3, #0]
 800577a:	2340      	movs	r3, #64	; 0x40
 800577c:	2202      	movs	r2, #2
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f002 faf3 	bl	8007d6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005784:	4b35      	ldr	r3, [pc, #212]	; (800585c <USBD_CDC_Init+0x1e8>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	f003 020f 	and.w	r2, r3, #15
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800579c:	2201      	movs	r2, #1
 800579e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80057a0:	4b2f      	ldr	r3, [pc, #188]	; (8005860 <USBD_CDC_Init+0x1ec>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	f003 020f 	and.w	r2, r3, #15
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	3326      	adds	r3, #38	; 0x26
 80057b6:	2210      	movs	r2, #16
 80057b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057ba:	4b29      	ldr	r3, [pc, #164]	; (8005860 <USBD_CDC_Init+0x1ec>)
 80057bc:	7819      	ldrb	r1, [r3, #0]
 80057be:	2308      	movs	r3, #8
 80057c0:	2203      	movs	r2, #3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f002 fad1 	bl	8007d6a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80057c8:	4b25      	ldr	r3, [pc, #148]	; (8005860 <USBD_CDC_Init+0x1ec>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	f003 020f 	and.w	r2, r3, #15
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	3324      	adds	r3, #36	; 0x24
 80057de:	2201      	movs	r2, #1
 80057e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	33b0      	adds	r3, #176	; 0xb0
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005818:	2302      	movs	r3, #2
 800581a:	e018      	b.n	800584e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	7c1b      	ldrb	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10a      	bne.n	800583a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005824:	4b0d      	ldr	r3, [pc, #52]	; (800585c <USBD_CDC_Init+0x1e8>)
 8005826:	7819      	ldrb	r1, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800582e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f002 fb88 	bl	8007f48 <USBD_LL_PrepareReceive>
 8005838:	e008      	b.n	800584c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800583a:	4b08      	ldr	r3, [pc, #32]	; (800585c <USBD_CDC_Init+0x1e8>)
 800583c:	7819      	ldrb	r1, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005844:	2340      	movs	r3, #64	; 0x40
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f002 fb7e 	bl	8007f48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000093 	.word	0x20000093
 800585c:	20000094 	.word	0x20000094
 8005860:	20000095 	.word	0x20000095

08005864 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005870:	4b3a      	ldr	r3, [pc, #232]	; (800595c <USBD_CDC_DeInit+0xf8>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f002 fa9d 	bl	8007db6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800587c:	4b37      	ldr	r3, [pc, #220]	; (800595c <USBD_CDC_DeInit+0xf8>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	f003 020f 	and.w	r2, r3, #15
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	4613      	mov	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	440b      	add	r3, r1
 8005890:	3324      	adds	r3, #36	; 0x24
 8005892:	2200      	movs	r2, #0
 8005894:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005896:	4b32      	ldr	r3, [pc, #200]	; (8005960 <USBD_CDC_DeInit+0xfc>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f002 fa8a 	bl	8007db6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80058a2:	4b2f      	ldr	r3, [pc, #188]	; (8005960 <USBD_CDC_DeInit+0xfc>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	f003 020f 	and.w	r2, r3, #15
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058ba:	2200      	movs	r2, #0
 80058bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80058be:	4b29      	ldr	r3, [pc, #164]	; (8005964 <USBD_CDC_DeInit+0x100>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f002 fa76 	bl	8007db6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80058ca:	4b26      	ldr	r3, [pc, #152]	; (8005964 <USBD_CDC_DeInit+0x100>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	f003 020f 	and.w	r2, r3, #15
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	440b      	add	r3, r1
 80058de:	3324      	adds	r3, #36	; 0x24
 80058e0:	2200      	movs	r2, #0
 80058e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80058e4:	4b1f      	ldr	r3, [pc, #124]	; (8005964 <USBD_CDC_DeInit+0x100>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	f003 020f 	and.w	r2, r3, #15
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	3326      	adds	r3, #38	; 0x26
 80058fa:	2200      	movs	r2, #0
 80058fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	32b0      	adds	r2, #176	; 0xb0
 8005908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01f      	beq.n	8005950 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	33b0      	adds	r3, #176	; 0xb0
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	32b0      	adds	r2, #176	; 0xb0
 800592e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005932:	4618      	mov	r0, r3
 8005934:	f002 fb4a 	bl	8007fcc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	32b0      	adds	r2, #176	; 0xb0
 8005942:	2100      	movs	r1, #0
 8005944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000093 	.word	0x20000093
 8005960:	20000094 	.word	0x20000094
 8005964:	20000095 	.word	0x20000095

08005968 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	32b0      	adds	r2, #176	; 0xb0
 800597c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005980:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005994:	2303      	movs	r3, #3
 8005996:	e0bf      	b.n	8005b18 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d050      	beq.n	8005a46 <USBD_CDC_Setup+0xde>
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	f040 80af 	bne.w	8005b08 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	88db      	ldrh	r3, [r3, #6]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d03a      	beq.n	8005a28 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	b25b      	sxtb	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	da1b      	bge.n	80059f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	33b0      	adds	r3, #176	; 0xb0
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80059d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	88d2      	ldrh	r2, [r2, #6]
 80059d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	88db      	ldrh	r3, [r3, #6]
 80059de:	2b07      	cmp	r3, #7
 80059e0:	bf28      	it	cs
 80059e2:	2307      	movcs	r3, #7
 80059e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	89fa      	ldrh	r2, [r7, #14]
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 fd89 	bl	8007504 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80059f2:	e090      	b.n	8005b16 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	785a      	ldrb	r2, [r3, #1]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	88db      	ldrh	r3, [r3, #6]
 8005a02:	2b3f      	cmp	r3, #63	; 0x3f
 8005a04:	d803      	bhi.n	8005a0e <USBD_CDC_Setup+0xa6>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	88db      	ldrh	r3, [r3, #6]
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	e000      	b.n	8005a10 <USBD_CDC_Setup+0xa8>
 8005a0e:	2240      	movs	r2, #64	; 0x40
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005a16:	6939      	ldr	r1, [r7, #16]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005a1e:	461a      	mov	r2, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 fd9b 	bl	800755c <USBD_CtlPrepareRx>
      break;
 8005a26:	e076      	b.n	8005b16 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	33b0      	adds	r3, #176	; 0xb0
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	7850      	ldrb	r0, [r2, #1]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	4798      	blx	r3
      break;
 8005a44:	e067      	b.n	8005b16 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	785b      	ldrb	r3, [r3, #1]
 8005a4a:	2b0b      	cmp	r3, #11
 8005a4c:	d851      	bhi.n	8005af2 <USBD_CDC_Setup+0x18a>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <USBD_CDC_Setup+0xec>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a85 	.word	0x08005a85
 8005a58:	08005b01 	.word	0x08005b01
 8005a5c:	08005af3 	.word	0x08005af3
 8005a60:	08005af3 	.word	0x08005af3
 8005a64:	08005af3 	.word	0x08005af3
 8005a68:	08005af3 	.word	0x08005af3
 8005a6c:	08005af3 	.word	0x08005af3
 8005a70:	08005af3 	.word	0x08005af3
 8005a74:	08005af3 	.word	0x08005af3
 8005a78:	08005af3 	.word	0x08005af3
 8005a7c:	08005aaf 	.word	0x08005aaf
 8005a80:	08005ad9 	.word	0x08005ad9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d107      	bne.n	8005aa0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a90:	f107 030a 	add.w	r3, r7, #10
 8005a94:	2202      	movs	r2, #2
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 fd33 	bl	8007504 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a9e:	e032      	b.n	8005b06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 fcbd 	bl	8007422 <USBD_CtlError>
            ret = USBD_FAIL;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	75fb      	strb	r3, [r7, #23]
          break;
 8005aac:	e02b      	b.n	8005b06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d107      	bne.n	8005aca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005aba:	f107 030d 	add.w	r3, r7, #13
 8005abe:	2201      	movs	r2, #1
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 fd1e 	bl	8007504 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ac8:	e01d      	b.n	8005b06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 fca8 	bl	8007422 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ad6:	e016      	b.n	8005b06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d00f      	beq.n	8005b04 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f001 fc9b 	bl	8007422 <USBD_CtlError>
            ret = USBD_FAIL;
 8005aec:	2303      	movs	r3, #3
 8005aee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005af0:	e008      	b.n	8005b04 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005af2:	6839      	ldr	r1, [r7, #0]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 fc94 	bl	8007422 <USBD_CtlError>
          ret = USBD_FAIL;
 8005afa:	2303      	movs	r3, #3
 8005afc:	75fb      	strb	r3, [r7, #23]
          break;
 8005afe:	e002      	b.n	8005b06 <USBD_CDC_Setup+0x19e>
          break;
 8005b00:	bf00      	nop
 8005b02:	e008      	b.n	8005b16 <USBD_CDC_Setup+0x1ae>
          break;
 8005b04:	bf00      	nop
      }
      break;
 8005b06:	e006      	b.n	8005b16 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005b08:	6839      	ldr	r1, [r7, #0]
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f001 fc89 	bl	8007422 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b10:	2303      	movs	r3, #3
 8005b12:	75fb      	strb	r3, [r7, #23]
      break;
 8005b14:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005b32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	32b0      	adds	r2, #176	; 0xb0
 8005b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e065      	b.n	8005c16 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	32b0      	adds	r2, #176	; 0xb0
 8005b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b5a:	78fb      	ldrb	r3, [r7, #3]
 8005b5c:	f003 020f 	and.w	r2, r3, #15
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	3318      	adds	r3, #24
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d02f      	beq.n	8005bd4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	f003 020f 	and.w	r2, r3, #15
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	3318      	adds	r3, #24
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	f003 010f 	and.w	r1, r3, #15
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	460b      	mov	r3, r1
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	440b      	add	r3, r1
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4403      	add	r3, r0
 8005b9c:	3348      	adds	r3, #72	; 0x48
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ba4:	fb01 f303 	mul.w	r3, r1, r3
 8005ba8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d112      	bne.n	8005bd4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	f003 020f 	and.w	r2, r3, #15
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	3318      	adds	r3, #24
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005bc6:	78f9      	ldrb	r1, [r7, #3]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	2200      	movs	r2, #0
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f002 f99a 	bl	8007f06 <USBD_LL_Transmit>
 8005bd2:	e01f      	b.n	8005c14 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	33b0      	adds	r3, #176	; 0xb0
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d010      	beq.n	8005c14 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	33b0      	adds	r3, #176	; 0xb0
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005c10:	78fa      	ldrb	r2, [r7, #3]
 8005c12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	460b      	mov	r3, r1
 8005c28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	32b0      	adds	r2, #176	; 0xb0
 8005c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	32b0      	adds	r2, #176	; 0xb0
 8005c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e01a      	b.n	8005c86 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f002 f998 	bl	8007f8a <USBD_LL_GetRxDataSize>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	33b0      	adds	r3, #176	; 0xb0
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c80:	4611      	mov	r1, r2
 8005c82:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b084      	sub	sp, #16
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	32b0      	adds	r2, #176	; 0xb0
 8005ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e025      	b.n	8005cfc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	33b0      	adds	r3, #176	; 0xb0
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01a      	beq.n	8005cfa <USBD_CDC_EP0_RxReady+0x6c>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005cca:	2bff      	cmp	r3, #255	; 0xff
 8005ccc:	d015      	beq.n	8005cfa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	33b0      	adds	r3, #176	; 0xb0
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005ce6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005cee:	b292      	uxth	r2, r2
 8005cf0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	22ff      	movs	r2, #255	; 0xff
 8005cf6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d0c:	2182      	movs	r1, #130	; 0x82
 8005d0e:	4818      	ldr	r0, [pc, #96]	; (8005d70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d10:	f000 fd4f 	bl	80067b2 <USBD_GetEpDesc>
 8005d14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d16:	2101      	movs	r1, #1
 8005d18:	4815      	ldr	r0, [pc, #84]	; (8005d70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d1a:	f000 fd4a 	bl	80067b2 <USBD_GetEpDesc>
 8005d1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d20:	2181      	movs	r1, #129	; 0x81
 8005d22:	4813      	ldr	r0, [pc, #76]	; (8005d70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d24:	f000 fd45 	bl	80067b2 <USBD_GetEpDesc>
 8005d28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2210      	movs	r2, #16
 8005d34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d006      	beq.n	8005d4a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d44:	711a      	strb	r2, [r3, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d006      	beq.n	8005d5e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d58:	711a      	strb	r2, [r3, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2243      	movs	r2, #67	; 0x43
 8005d62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d64:	4b02      	ldr	r3, [pc, #8]	; (8005d70 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000050 	.word	0x20000050

08005d74 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d7c:	2182      	movs	r1, #130	; 0x82
 8005d7e:	4818      	ldr	r0, [pc, #96]	; (8005de0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d80:	f000 fd17 	bl	80067b2 <USBD_GetEpDesc>
 8005d84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d86:	2101      	movs	r1, #1
 8005d88:	4815      	ldr	r0, [pc, #84]	; (8005de0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d8a:	f000 fd12 	bl	80067b2 <USBD_GetEpDesc>
 8005d8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d90:	2181      	movs	r1, #129	; 0x81
 8005d92:	4813      	ldr	r0, [pc, #76]	; (8005de0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d94:	f000 fd0d 	bl	80067b2 <USBD_GetEpDesc>
 8005d98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2210      	movs	r2, #16
 8005da4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d006      	beq.n	8005dba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	2200      	movs	r2, #0
 8005db0:	711a      	strb	r2, [r3, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f042 0202 	orr.w	r2, r2, #2
 8005db8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d006      	beq.n	8005dce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	711a      	strb	r2, [r3, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f042 0202 	orr.w	r2, r2, #2
 8005dcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2243      	movs	r2, #67	; 0x43
 8005dd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005dd4:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000050 	.word	0x20000050

08005de4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005dec:	2182      	movs	r1, #130	; 0x82
 8005dee:	4818      	ldr	r0, [pc, #96]	; (8005e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005df0:	f000 fcdf 	bl	80067b2 <USBD_GetEpDesc>
 8005df4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005df6:	2101      	movs	r1, #1
 8005df8:	4815      	ldr	r0, [pc, #84]	; (8005e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005dfa:	f000 fcda 	bl	80067b2 <USBD_GetEpDesc>
 8005dfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e00:	2181      	movs	r1, #129	; 0x81
 8005e02:	4813      	ldr	r0, [pc, #76]	; (8005e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e04:	f000 fcd5 	bl	80067b2 <USBD_GetEpDesc>
 8005e08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2210      	movs	r2, #16
 8005e14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d006      	beq.n	8005e2a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e24:	711a      	strb	r2, [r3, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d006      	beq.n	8005e3e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e38:	711a      	strb	r2, [r3, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2243      	movs	r2, #67	; 0x43
 8005e42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e44:	4b02      	ldr	r3, [pc, #8]	; (8005e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000050 	.word	0x20000050

08005e54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	220a      	movs	r2, #10
 8005e60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e62:	4b03      	ldr	r3, [pc, #12]	; (8005e70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	2000000c 	.word	0x2000000c

08005e74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e009      	b.n	8005e9c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	33b0      	adds	r3, #176	; 0xb0
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	32b0      	adds	r2, #176	; 0xb0
 8005ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e008      	b.n	8005ee0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	32b0      	adds	r2, #176	; 0xb0
 8005f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e004      	b.n	8005f1a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	32b0      	adds	r2, #176	; 0xb0
 8005f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f40:	2301      	movs	r3, #1
 8005f42:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	32b0      	adds	r2, #176	; 0xb0
 8005f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e025      	b.n	8005fa6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d11f      	bne.n	8005fa4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005f6c:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <USBD_CDC_TransmitPacket+0x88>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	f003 020f 	and.w	r2, r3, #15
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4403      	add	r3, r0
 8005f86:	3318      	adds	r3, #24
 8005f88:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <USBD_CDC_TransmitPacket+0x88>)
 8005f8c:	7819      	ldrb	r1, [r3, #0]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 ffb3 	bl	8007f06 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000093 	.word	0x20000093

08005fb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	32b0      	adds	r2, #176	; 0xb0
 8005fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	32b0      	adds	r2, #176	; 0xb0
 8005fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e018      	b.n	8006014 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	7c1b      	ldrb	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10a      	bne.n	8006000 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fea:	4b0c      	ldr	r3, [pc, #48]	; (800601c <USBD_CDC_ReceivePacket+0x68>)
 8005fec:	7819      	ldrb	r1, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 ffa5 	bl	8007f48 <USBD_LL_PrepareReceive>
 8005ffe:	e008      	b.n	8006012 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006000:	4b06      	ldr	r3, [pc, #24]	; (800601c <USBD_CDC_ReceivePacket+0x68>)
 8006002:	7819      	ldrb	r1, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800600a:	2340      	movs	r3, #64	; 0x40
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 ff9b 	bl	8007f48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20000094 	.word	0x20000094

08006020 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	4613      	mov	r3, r2
 800602c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006034:	2303      	movs	r3, #3
 8006036:	e01f      	b.n	8006078 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	79fa      	ldrb	r2, [r7, #7]
 800606a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f001 fe15 	bl	8007c9c <USBD_LL_Init>
 8006072:	4603      	mov	r3, r0
 8006074:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006076:	7dfb      	ldrb	r3, [r7, #23]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006094:	2303      	movs	r3, #3
 8006096:	e025      	b.n	80060e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	32ae      	adds	r2, #174	; 0xae
 80060aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00f      	beq.n	80060d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	32ae      	adds	r2, #174	; 0xae
 80060be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	f107 020e 	add.w	r2, r7, #14
 80060c8:	4610      	mov	r0, r2
 80060ca:	4798      	blx	r3
 80060cc:	4602      	mov	r2, r0
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 fe1d 	bl	8007d34 <USBD_LL_Start>
 80060fa:	4603      	mov	r3, r0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800610c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	78fa      	ldrb	r2, [r7, #3]
 800613e:	4611      	mov	r1, r2
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
 8006144:	4603      	mov	r3, r0
 8006146:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	460b      	mov	r3, r1
 800615c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	78fa      	ldrb	r2, [r7, #3]
 800616c:	4611      	mov	r1, r2
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006178:	2303      	movs	r3, #3
 800617a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f001 f908 	bl	80073ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80061ac:	461a      	mov	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061ba:	f003 031f 	and.w	r3, r3, #31
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d01a      	beq.n	80061f8 <USBD_LL_SetupStage+0x72>
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d822      	bhi.n	800620c <USBD_LL_SetupStage+0x86>
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <USBD_LL_SetupStage+0x4a>
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d00a      	beq.n	80061e4 <USBD_LL_SetupStage+0x5e>
 80061ce:	e01d      	b.n	800620c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fb5f 	bl	800689c <USBD_StdDevReq>
 80061de:	4603      	mov	r3, r0
 80061e0:	73fb      	strb	r3, [r7, #15]
      break;
 80061e2:	e020      	b.n	8006226 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fbc7 	bl	8006980 <USBD_StdItfReq>
 80061f2:	4603      	mov	r3, r0
 80061f4:	73fb      	strb	r3, [r7, #15]
      break;
 80061f6:	e016      	b.n	8006226 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fc29 	bl	8006a58 <USBD_StdEPReq>
 8006206:	4603      	mov	r3, r0
 8006208:	73fb      	strb	r3, [r7, #15]
      break;
 800620a:	e00c      	b.n	8006226 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006212:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006216:	b2db      	uxtb	r3, r3
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f001 fdea 	bl	8007df4 <USBD_LL_StallEP>
 8006220:	4603      	mov	r3, r0
 8006222:	73fb      	strb	r3, [r7, #15]
      break;
 8006224:	bf00      	nop
  }

  return ret;
 8006226:	7bfb      	ldrb	r3, [r7, #15]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	460b      	mov	r3, r1
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006242:	7afb      	ldrb	r3, [r7, #11]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d16e      	bne.n	8006326 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800624e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006256:	2b03      	cmp	r3, #3
 8006258:	f040 8098 	bne.w	800638c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	429a      	cmp	r2, r3
 8006266:	d913      	bls.n	8006290 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	1ad2      	subs	r2, r2, r3
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	4293      	cmp	r3, r2
 8006280:	bf28      	it	cs
 8006282:	4613      	movcs	r3, r2
 8006284:	461a      	mov	r2, r3
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f001 f984 	bl	8007596 <USBD_CtlContinueRx>
 800628e:	e07d      	b.n	800638c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	2b02      	cmp	r3, #2
 800629c:	d014      	beq.n	80062c8 <USBD_LL_DataOutStage+0x98>
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d81d      	bhi.n	80062de <USBD_LL_DataOutStage+0xae>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <USBD_LL_DataOutStage+0x7c>
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d003      	beq.n	80062b2 <USBD_LL_DataOutStage+0x82>
 80062aa:	e018      	b.n	80062de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	75bb      	strb	r3, [r7, #22]
            break;
 80062b0:	e018      	b.n	80062e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	4619      	mov	r1, r3
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 fa5e 	bl	800677e <USBD_CoreFindIF>
 80062c2:	4603      	mov	r3, r0
 80062c4:	75bb      	strb	r3, [r7, #22]
            break;
 80062c6:	e00d      	b.n	80062e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	4619      	mov	r1, r3
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fa60 	bl	8006798 <USBD_CoreFindEP>
 80062d8:	4603      	mov	r3, r0
 80062da:	75bb      	strb	r3, [r7, #22]
            break;
 80062dc:	e002      	b.n	80062e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	75bb      	strb	r3, [r7, #22]
            break;
 80062e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80062e4:	7dbb      	ldrb	r3, [r7, #22]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d119      	bne.n	800631e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d113      	bne.n	800631e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80062f6:	7dba      	ldrb	r2, [r7, #22]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	32ae      	adds	r2, #174	; 0xae
 80062fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00b      	beq.n	800631e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006306:	7dba      	ldrb	r2, [r7, #22]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800630e:	7dba      	ldrb	r2, [r7, #22]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	32ae      	adds	r2, #174	; 0xae
 8006314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f001 f94a 	bl	80075b8 <USBD_CtlSendStatus>
 8006324:	e032      	b.n	800638c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006326:	7afb      	ldrb	r3, [r7, #11]
 8006328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632c:	b2db      	uxtb	r3, r3
 800632e:	4619      	mov	r1, r3
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 fa31 	bl	8006798 <USBD_CoreFindEP>
 8006336:	4603      	mov	r3, r0
 8006338:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800633a:	7dbb      	ldrb	r3, [r7, #22]
 800633c:	2bff      	cmp	r3, #255	; 0xff
 800633e:	d025      	beq.n	800638c <USBD_LL_DataOutStage+0x15c>
 8006340:	7dbb      	ldrb	r3, [r7, #22]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d122      	bne.n	800638c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b03      	cmp	r3, #3
 8006350:	d117      	bne.n	8006382 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006352:	7dba      	ldrb	r2, [r7, #22]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	32ae      	adds	r2, #174	; 0xae
 8006358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00f      	beq.n	8006382 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006362:	7dba      	ldrb	r2, [r7, #22]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800636a:	7dba      	ldrb	r2, [r7, #22]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	32ae      	adds	r2, #174	; 0xae
 8006370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	7afa      	ldrb	r2, [r7, #11]
 8006378:	4611      	mov	r1, r2
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	4798      	blx	r3
 800637e:	4603      	mov	r3, r0
 8006380:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006382:	7dfb      	ldrb	r3, [r7, #23]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006388:	7dfb      	ldrb	r3, [r7, #23]
 800638a:	e000      	b.n	800638e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b086      	sub	sp, #24
 800639a:	af00      	add	r7, sp, #0
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	460b      	mov	r3, r1
 80063a0:	607a      	str	r2, [r7, #4]
 80063a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80063a4:	7afb      	ldrb	r3, [r7, #11]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d16f      	bne.n	800648a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3314      	adds	r3, #20
 80063ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d15a      	bne.n	8006470 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d914      	bls.n	80063f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	1ad2      	subs	r2, r2, r3
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	461a      	mov	r2, r3
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f001 f8ac 	bl	800753a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063e2:	2300      	movs	r3, #0
 80063e4:	2200      	movs	r2, #0
 80063e6:	2100      	movs	r1, #0
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f001 fdad 	bl	8007f48 <USBD_LL_PrepareReceive>
 80063ee:	e03f      	b.n	8006470 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d11c      	bne.n	8006436 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006404:	429a      	cmp	r2, r3
 8006406:	d316      	bcc.n	8006436 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006412:	429a      	cmp	r2, r3
 8006414:	d20f      	bcs.n	8006436 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006416:	2200      	movs	r2, #0
 8006418:	2100      	movs	r1, #0
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f001 f88d 	bl	800753a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006428:	2300      	movs	r3, #0
 800642a:	2200      	movs	r2, #0
 800642c:	2100      	movs	r1, #0
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f001 fd8a 	bl	8007f48 <USBD_LL_PrepareReceive>
 8006434:	e01c      	b.n	8006470 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b03      	cmp	r3, #3
 8006440:	d10f      	bne.n	8006462 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006462:	2180      	movs	r1, #128	; 0x80
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f001 fcc5 	bl	8007df4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f001 f8b7 	bl	80075de <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d03a      	beq.n	80064f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f7ff fe42 	bl	8006104 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006488:	e032      	b.n	80064f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800648a:	7afb      	ldrb	r3, [r7, #11]
 800648c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006490:	b2db      	uxtb	r3, r3
 8006492:	4619      	mov	r1, r3
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f000 f97f 	bl	8006798 <USBD_CoreFindEP>
 800649a:	4603      	mov	r3, r0
 800649c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800649e:	7dfb      	ldrb	r3, [r7, #23]
 80064a0:	2bff      	cmp	r3, #255	; 0xff
 80064a2:	d025      	beq.n	80064f0 <USBD_LL_DataInStage+0x15a>
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d122      	bne.n	80064f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d11c      	bne.n	80064f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80064b6:	7dfa      	ldrb	r2, [r7, #23]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	32ae      	adds	r2, #174	; 0xae
 80064bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d014      	beq.n	80064f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80064c6:	7dfa      	ldrb	r2, [r7, #23]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80064ce:	7dfa      	ldrb	r2, [r7, #23]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	32ae      	adds	r2, #174	; 0xae
 80064d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	7afa      	ldrb	r2, [r7, #11]
 80064dc:	4611      	mov	r1, r2
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	4798      	blx	r3
 80064e2:	4603      	mov	r3, r0
 80064e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80064e6:	7dbb      	ldrb	r3, [r7, #22]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80064ec:	7dbb      	ldrb	r3, [r7, #22]
 80064ee:	e000      	b.n	80064f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d014      	beq.n	8006560 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00e      	beq.n	8006560 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6852      	ldr	r2, [r2, #4]
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	4611      	mov	r1, r2
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	4798      	blx	r3
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800655c:	2303      	movs	r3, #3
 800655e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006560:	2340      	movs	r3, #64	; 0x40
 8006562:	2200      	movs	r2, #0
 8006564:	2100      	movs	r1, #0
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fbff 	bl	8007d6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2240      	movs	r2, #64	; 0x40
 8006578:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800657c:	2340      	movs	r3, #64	; 0x40
 800657e:	2200      	movs	r2, #0
 8006580:	2180      	movs	r1, #128	; 0x80
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 fbf1 	bl	8007d6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2240      	movs	r2, #64	; 0x40
 8006592:	621a      	str	r2, [r3, #32]

  return ret;
 8006594:	7bfb      	ldrb	r3, [r7, #15]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	460b      	mov	r3, r1
 80065a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	78fa      	ldrb	r2, [r7, #3]
 80065ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2204      	movs	r2, #4
 80065d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d106      	bne.n	800660c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006604:	b2da      	uxtb	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b03      	cmp	r3, #3
 800662c:	d110      	bne.n	8006650 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	32ae      	adds	r2, #174	; 0xae
 8006670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006678:	2303      	movs	r3, #3
 800667a:	e01c      	b.n	80066b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b03      	cmp	r3, #3
 8006686:	d115      	bne.n	80066b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	32ae      	adds	r2, #174	; 0xae
 8006692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	32ae      	adds	r2, #174	; 0xae
 80066a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	78fa      	ldrb	r2, [r7, #3]
 80066ae:	4611      	mov	r1, r2
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	32ae      	adds	r2, #174	; 0xae
 80066d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80066dc:	2303      	movs	r3, #3
 80066de:	e01c      	b.n	800671a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d115      	bne.n	8006718 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	32ae      	adds	r2, #174	; 0xae
 80066f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00b      	beq.n	8006718 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	32ae      	adds	r2, #174	; 0xae
 800670a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	78fa      	ldrb	r2, [r7, #3]
 8006712:	4611      	mov	r1, r2
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00e      	beq.n	8006774 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	6852      	ldr	r2, [r2, #4]
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	4611      	mov	r1, r2
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	4798      	blx	r3
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006770:	2303      	movs	r3, #3
 8006772:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	460b      	mov	r3, r1
 8006788:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800678a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800678c:	4618      	mov	r0, r3
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b086      	sub	sp, #24
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	460b      	mov	r3, r1
 80067bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	885b      	ldrh	r3, [r3, #2]
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d920      	bls.n	800681c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80067e2:	e013      	b.n	800680c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80067e4:	f107 030a 	add.w	r3, r7, #10
 80067e8:	4619      	mov	r1, r3
 80067ea:	6978      	ldr	r0, [r7, #20]
 80067ec:	f000 f81b 	bl	8006826 <USBD_GetNextDesc>
 80067f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	2b05      	cmp	r3, #5
 80067f8:	d108      	bne.n	800680c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	789b      	ldrb	r3, [r3, #2]
 8006802:	78fa      	ldrb	r2, [r7, #3]
 8006804:	429a      	cmp	r2, r3
 8006806:	d008      	beq.n	800681a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006808:	2300      	movs	r3, #0
 800680a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	885b      	ldrh	r3, [r3, #2]
 8006810:	b29a      	uxth	r2, r3
 8006812:	897b      	ldrh	r3, [r7, #10]
 8006814:	429a      	cmp	r2, r3
 8006816:	d8e5      	bhi.n	80067e4 <USBD_GetEpDesc+0x32>
 8006818:	e000      	b.n	800681c <USBD_GetEpDesc+0x6a>
          break;
 800681a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800681c:	693b      	ldr	r3, [r7, #16]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	881a      	ldrh	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	b29b      	uxth	r3, r3
 800683e:	4413      	add	r3, r2
 8006840:	b29a      	uxth	r2, r3
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4413      	add	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006852:	68fb      	ldr	r3, [r7, #12]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	3301      	adds	r3, #1
 8006876:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800687e:	8a3b      	ldrh	r3, [r7, #16]
 8006880:	021b      	lsls	r3, r3, #8
 8006882:	b21a      	sxth	r2, r3
 8006884:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006888:	4313      	orrs	r3, r2
 800688a:	b21b      	sxth	r3, r3
 800688c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800688e:	89fb      	ldrh	r3, [r7, #14]
}
 8006890:	4618      	mov	r0, r3
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068b2:	2b40      	cmp	r3, #64	; 0x40
 80068b4:	d005      	beq.n	80068c2 <USBD_StdDevReq+0x26>
 80068b6:	2b40      	cmp	r3, #64	; 0x40
 80068b8:	d857      	bhi.n	800696a <USBD_StdDevReq+0xce>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00f      	beq.n	80068de <USBD_StdDevReq+0x42>
 80068be:	2b20      	cmp	r3, #32
 80068c0:	d153      	bne.n	800696a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	32ae      	adds	r2, #174	; 0xae
 80068cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	4798      	blx	r3
 80068d8:	4603      	mov	r3, r0
 80068da:	73fb      	strb	r3, [r7, #15]
      break;
 80068dc:	e04a      	b.n	8006974 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	2b09      	cmp	r3, #9
 80068e4:	d83b      	bhi.n	800695e <USBD_StdDevReq+0xc2>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <USBD_StdDevReq+0x50>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	08006941 	.word	0x08006941
 80068f0:	08006955 	.word	0x08006955
 80068f4:	0800695f 	.word	0x0800695f
 80068f8:	0800694b 	.word	0x0800694b
 80068fc:	0800695f 	.word	0x0800695f
 8006900:	0800691f 	.word	0x0800691f
 8006904:	08006915 	.word	0x08006915
 8006908:	0800695f 	.word	0x0800695f
 800690c:	08006937 	.word	0x08006937
 8006910:	08006929 	.word	0x08006929
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fa3c 	bl	8006d94 <USBD_GetDescriptor>
          break;
 800691c:	e024      	b.n	8006968 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fba1 	bl	8007068 <USBD_SetAddress>
          break;
 8006926:	e01f      	b.n	8006968 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fbe0 	bl	80070f0 <USBD_SetConfig>
 8006930:	4603      	mov	r3, r0
 8006932:	73fb      	strb	r3, [r7, #15]
          break;
 8006934:	e018      	b.n	8006968 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fc83 	bl	8007244 <USBD_GetConfig>
          break;
 800693e:	e013      	b.n	8006968 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fcb4 	bl	80072b0 <USBD_GetStatus>
          break;
 8006948:	e00e      	b.n	8006968 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fce3 	bl	8007318 <USBD_SetFeature>
          break;
 8006952:	e009      	b.n	8006968 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fd07 	bl	800736a <USBD_ClrFeature>
          break;
 800695c:	e004      	b.n	8006968 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fd5e 	bl	8007422 <USBD_CtlError>
          break;
 8006966:	bf00      	nop
      }
      break;
 8006968:	e004      	b.n	8006974 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fd58 	bl	8007422 <USBD_CtlError>
      break;
 8006972:	bf00      	nop
  }

  return ret;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop

08006980 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006996:	2b40      	cmp	r3, #64	; 0x40
 8006998:	d005      	beq.n	80069a6 <USBD_StdItfReq+0x26>
 800699a:	2b40      	cmp	r3, #64	; 0x40
 800699c:	d852      	bhi.n	8006a44 <USBD_StdItfReq+0xc4>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <USBD_StdItfReq+0x26>
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d14e      	bne.n	8006a44 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d840      	bhi.n	8006a36 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	889b      	ldrh	r3, [r3, #4]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d836      	bhi.n	8006a2c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	889b      	ldrh	r3, [r3, #4]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff fed9 	bl	800677e <USBD_CoreFindIF>
 80069cc:	4603      	mov	r3, r0
 80069ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	2bff      	cmp	r3, #255	; 0xff
 80069d4:	d01d      	beq.n	8006a12 <USBD_StdItfReq+0x92>
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d11a      	bne.n	8006a12 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80069dc:	7bba      	ldrb	r2, [r7, #14]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	32ae      	adds	r2, #174	; 0xae
 80069e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00f      	beq.n	8006a0c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80069ec:	7bba      	ldrb	r2, [r7, #14]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069f4:	7bba      	ldrb	r2, [r7, #14]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	32ae      	adds	r2, #174	; 0xae
 80069fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	4798      	blx	r3
 8006a06:	4603      	mov	r3, r0
 8006a08:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a0a:	e004      	b.n	8006a16 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a10:	e001      	b.n	8006a16 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006a12:	2303      	movs	r3, #3
 8006a14:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	88db      	ldrh	r3, [r3, #6]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d110      	bne.n	8006a40 <USBD_StdItfReq+0xc0>
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10d      	bne.n	8006a40 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fdc7 	bl	80075b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a2a:	e009      	b.n	8006a40 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fcf7 	bl	8007422 <USBD_CtlError>
          break;
 8006a34:	e004      	b.n	8006a40 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fcf2 	bl	8007422 <USBD_CtlError>
          break;
 8006a3e:	e000      	b.n	8006a42 <USBD_StdItfReq+0xc2>
          break;
 8006a40:	bf00      	nop
      }
      break;
 8006a42:	e004      	b.n	8006a4e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fceb 	bl	8007422 <USBD_CtlError>
      break;
 8006a4c:	bf00      	nop
  }

  return ret;
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	889b      	ldrh	r3, [r3, #4]
 8006a6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a74:	2b40      	cmp	r3, #64	; 0x40
 8006a76:	d007      	beq.n	8006a88 <USBD_StdEPReq+0x30>
 8006a78:	2b40      	cmp	r3, #64	; 0x40
 8006a7a:	f200 817f 	bhi.w	8006d7c <USBD_StdEPReq+0x324>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d02a      	beq.n	8006ad8 <USBD_StdEPReq+0x80>
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	f040 817a 	bne.w	8006d7c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff fe83 	bl	8006798 <USBD_CoreFindEP>
 8006a92:	4603      	mov	r3, r0
 8006a94:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a96:	7b7b      	ldrb	r3, [r7, #13]
 8006a98:	2bff      	cmp	r3, #255	; 0xff
 8006a9a:	f000 8174 	beq.w	8006d86 <USBD_StdEPReq+0x32e>
 8006a9e:	7b7b      	ldrb	r3, [r7, #13]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f040 8170 	bne.w	8006d86 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006aa6:	7b7a      	ldrb	r2, [r7, #13]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006aae:	7b7a      	ldrb	r2, [r7, #13]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	32ae      	adds	r2, #174	; 0xae
 8006ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 8163 	beq.w	8006d86 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006ac0:	7b7a      	ldrb	r2, [r7, #13]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	32ae      	adds	r2, #174	; 0xae
 8006ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	4798      	blx	r3
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ad6:	e156      	b.n	8006d86 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	785b      	ldrb	r3, [r3, #1]
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d008      	beq.n	8006af2 <USBD_StdEPReq+0x9a>
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	f300 8145 	bgt.w	8006d70 <USBD_StdEPReq+0x318>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 809b 	beq.w	8006c22 <USBD_StdEPReq+0x1ca>
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d03c      	beq.n	8006b6a <USBD_StdEPReq+0x112>
 8006af0:	e13e      	b.n	8006d70 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d002      	beq.n	8006b04 <USBD_StdEPReq+0xac>
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d016      	beq.n	8006b30 <USBD_StdEPReq+0xd8>
 8006b02:	e02c      	b.n	8006b5e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00d      	beq.n	8006b26 <USBD_StdEPReq+0xce>
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	2b80      	cmp	r3, #128	; 0x80
 8006b0e:	d00a      	beq.n	8006b26 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 f96d 	bl	8007df4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b1a:	2180      	movs	r1, #128	; 0x80
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 f969 	bl	8007df4 <USBD_LL_StallEP>
 8006b22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b24:	e020      	b.n	8006b68 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fc7a 	bl	8007422 <USBD_CtlError>
              break;
 8006b2e:	e01b      	b.n	8006b68 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	885b      	ldrh	r3, [r3, #2]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10e      	bne.n	8006b56 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00b      	beq.n	8006b56 <USBD_StdEPReq+0xfe>
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	2b80      	cmp	r3, #128	; 0x80
 8006b42:	d008      	beq.n	8006b56 <USBD_StdEPReq+0xfe>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	88db      	ldrh	r3, [r3, #6]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d104      	bne.n	8006b56 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 f94f 	bl	8007df4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fd2e 	bl	80075b8 <USBD_CtlSendStatus>

              break;
 8006b5c:	e004      	b.n	8006b68 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fc5e 	bl	8007422 <USBD_CtlError>
              break;
 8006b66:	bf00      	nop
          }
          break;
 8006b68:	e107      	b.n	8006d7a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d002      	beq.n	8006b7c <USBD_StdEPReq+0x124>
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d016      	beq.n	8006ba8 <USBD_StdEPReq+0x150>
 8006b7a:	e04b      	b.n	8006c14 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00d      	beq.n	8006b9e <USBD_StdEPReq+0x146>
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	2b80      	cmp	r3, #128	; 0x80
 8006b86:	d00a      	beq.n	8006b9e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f931 	bl	8007df4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b92:	2180      	movs	r1, #128	; 0x80
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 f92d 	bl	8007df4 <USBD_LL_StallEP>
 8006b9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b9c:	e040      	b.n	8006c20 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fc3e 	bl	8007422 <USBD_CtlError>
              break;
 8006ba6:	e03b      	b.n	8006c20 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	885b      	ldrh	r3, [r3, #2]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d136      	bne.n	8006c1e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d004      	beq.n	8006bc4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 f937 	bl	8007e32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fcf7 	bl	80075b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006bca:	7bbb      	ldrb	r3, [r7, #14]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7ff fde2 	bl	8006798 <USBD_CoreFindEP>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bd8:	7b7b      	ldrb	r3, [r7, #13]
 8006bda:	2bff      	cmp	r3, #255	; 0xff
 8006bdc:	d01f      	beq.n	8006c1e <USBD_StdEPReq+0x1c6>
 8006bde:	7b7b      	ldrb	r3, [r7, #13]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d11c      	bne.n	8006c1e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006be4:	7b7a      	ldrb	r2, [r7, #13]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006bec:	7b7a      	ldrb	r2, [r7, #13]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	32ae      	adds	r2, #174	; 0xae
 8006bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d010      	beq.n	8006c1e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006bfc:	7b7a      	ldrb	r2, [r7, #13]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	32ae      	adds	r2, #174	; 0xae
 8006c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	4798      	blx	r3
 8006c0e:	4603      	mov	r3, r0
 8006c10:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006c12:	e004      	b.n	8006c1e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fc03 	bl	8007422 <USBD_CtlError>
              break;
 8006c1c:	e000      	b.n	8006c20 <USBD_StdEPReq+0x1c8>
              break;
 8006c1e:	bf00      	nop
          }
          break;
 8006c20:	e0ab      	b.n	8006d7a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d002      	beq.n	8006c34 <USBD_StdEPReq+0x1dc>
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d032      	beq.n	8006c98 <USBD_StdEPReq+0x240>
 8006c32:	e097      	b.n	8006d64 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d007      	beq.n	8006c4a <USBD_StdEPReq+0x1f2>
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	2b80      	cmp	r3, #128	; 0x80
 8006c3e:	d004      	beq.n	8006c4a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fbed 	bl	8007422 <USBD_CtlError>
                break;
 8006c48:	e091      	b.n	8006d6e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	da0b      	bge.n	8006c6a <USBD_StdEPReq+0x212>
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	3310      	adds	r3, #16
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	4413      	add	r3, r2
 8006c66:	3304      	adds	r3, #4
 8006c68:	e00b      	b.n	8006c82 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	4413      	add	r3, r2
 8006c80:	3304      	adds	r3, #4
 8006c82:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fc37 	bl	8007504 <USBD_CtlSendData>
              break;
 8006c96:	e06a      	b.n	8006d6e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	da11      	bge.n	8006cc4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	f003 020f 	and.w	r2, r3, #15
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	3324      	adds	r3, #36	; 0x24
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d117      	bne.n	8006cea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fbb0 	bl	8007422 <USBD_CtlError>
                  break;
 8006cc2:	e054      	b.n	8006d6e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	f003 020f 	and.w	r2, r3, #15
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	440b      	add	r3, r1
 8006cd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d104      	bne.n	8006cea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fb9d 	bl	8007422 <USBD_CtlError>
                  break;
 8006ce8:	e041      	b.n	8006d6e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	da0b      	bge.n	8006d0a <USBD_StdEPReq+0x2b2>
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
 8006cf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	3310      	adds	r3, #16
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	4413      	add	r3, r2
 8006d06:	3304      	adds	r3, #4
 8006d08:	e00b      	b.n	8006d22 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d0a:	7bbb      	ldrb	r3, [r7, #14]
 8006d0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	4413      	add	r3, r2
 8006d20:	3304      	adds	r3, #4
 8006d22:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <USBD_StdEPReq+0x2d8>
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b80      	cmp	r3, #128	; 0x80
 8006d2e:	d103      	bne.n	8006d38 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	e00e      	b.n	8006d56 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 f897 	bl	8007e70 <USBD_LL_IsStallEP>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e002      	b.n	8006d56 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fbd1 	bl	8007504 <USBD_CtlSendData>
              break;
 8006d62:	e004      	b.n	8006d6e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fb5b 	bl	8007422 <USBD_CtlError>
              break;
 8006d6c:	bf00      	nop
          }
          break;
 8006d6e:	e004      	b.n	8006d7a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fb55 	bl	8007422 <USBD_CtlError>
          break;
 8006d78:	bf00      	nop
      }
      break;
 8006d7a:	e005      	b.n	8006d88 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fb4f 	bl	8007422 <USBD_CtlError>
      break;
 8006d84:	e000      	b.n	8006d88 <USBD_StdEPReq+0x330>
      break;
 8006d86:	bf00      	nop
  }

  return ret;
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	885b      	ldrh	r3, [r3, #2]
 8006dae:	0a1b      	lsrs	r3, r3, #8
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	2b06      	cmp	r3, #6
 8006db6:	f200 8128 	bhi.w	800700a <USBD_GetDescriptor+0x276>
 8006dba:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <USBD_GetDescriptor+0x2c>)
 8006dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc0:	08006ddd 	.word	0x08006ddd
 8006dc4:	08006df5 	.word	0x08006df5
 8006dc8:	08006e35 	.word	0x08006e35
 8006dcc:	0800700b 	.word	0x0800700b
 8006dd0:	0800700b 	.word	0x0800700b
 8006dd4:	08006fab 	.word	0x08006fab
 8006dd8:	08006fd7 	.word	0x08006fd7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	7c12      	ldrb	r2, [r2, #16]
 8006de8:	f107 0108 	add.w	r1, r7, #8
 8006dec:	4610      	mov	r0, r2
 8006dee:	4798      	blx	r3
 8006df0:	60f8      	str	r0, [r7, #12]
      break;
 8006df2:	e112      	b.n	800701a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	7c1b      	ldrb	r3, [r3, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10d      	bne.n	8006e18 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	f107 0208 	add.w	r2, r7, #8
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4798      	blx	r3
 8006e0c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	2202      	movs	r2, #2
 8006e14:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e16:	e100      	b.n	800701a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	f107 0208 	add.w	r2, r7, #8
 8006e24:	4610      	mov	r0, r2
 8006e26:	4798      	blx	r3
 8006e28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	2202      	movs	r2, #2
 8006e30:	701a      	strb	r2, [r3, #0]
      break;
 8006e32:	e0f2      	b.n	800701a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	885b      	ldrh	r3, [r3, #2]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b05      	cmp	r3, #5
 8006e3c:	f200 80ac 	bhi.w	8006f98 <USBD_GetDescriptor+0x204>
 8006e40:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <USBD_GetDescriptor+0xb4>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e61 	.word	0x08006e61
 8006e4c:	08006e95 	.word	0x08006e95
 8006e50:	08006ec9 	.word	0x08006ec9
 8006e54:	08006efd 	.word	0x08006efd
 8006e58:	08006f31 	.word	0x08006f31
 8006e5c:	08006f65 	.word	0x08006f65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00b      	beq.n	8006e84 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	7c12      	ldrb	r2, [r2, #16]
 8006e78:	f107 0108 	add.w	r1, r7, #8
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
 8006e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e82:	e091      	b.n	8006fa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 facb 	bl	8007422 <USBD_CtlError>
            err++;
 8006e8c:	7afb      	ldrb	r3, [r7, #11]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	72fb      	strb	r3, [r7, #11]
          break;
 8006e92:	e089      	b.n	8006fa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	7c12      	ldrb	r2, [r2, #16]
 8006eac:	f107 0108 	add.w	r1, r7, #8
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4798      	blx	r3
 8006eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eb6:	e077      	b.n	8006fa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fab1 	bl	8007422 <USBD_CtlError>
            err++;
 8006ec0:	7afb      	ldrb	r3, [r7, #11]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ec6:	e06f      	b.n	8006fa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00b      	beq.n	8006eec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	7c12      	ldrb	r2, [r2, #16]
 8006ee0:	f107 0108 	add.w	r1, r7, #8
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4798      	blx	r3
 8006ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eea:	e05d      	b.n	8006fa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa97 	bl	8007422 <USBD_CtlError>
            err++;
 8006ef4:	7afb      	ldrb	r3, [r7, #11]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8006efa:	e055      	b.n	8006fa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	7c12      	ldrb	r2, [r2, #16]
 8006f14:	f107 0108 	add.w	r1, r7, #8
 8006f18:	4610      	mov	r0, r2
 8006f1a:	4798      	blx	r3
 8006f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f1e:	e043      	b.n	8006fa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa7d 	bl	8007422 <USBD_CtlError>
            err++;
 8006f28:	7afb      	ldrb	r3, [r7, #11]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f2e:	e03b      	b.n	8006fa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00b      	beq.n	8006f54 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	7c12      	ldrb	r2, [r2, #16]
 8006f48:	f107 0108 	add.w	r1, r7, #8
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	4798      	blx	r3
 8006f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f52:	e029      	b.n	8006fa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fa63 	bl	8007422 <USBD_CtlError>
            err++;
 8006f5c:	7afb      	ldrb	r3, [r7, #11]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	72fb      	strb	r3, [r7, #11]
          break;
 8006f62:	e021      	b.n	8006fa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00b      	beq.n	8006f88 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	7c12      	ldrb	r2, [r2, #16]
 8006f7c:	f107 0108 	add.w	r1, r7, #8
 8006f80:	4610      	mov	r0, r2
 8006f82:	4798      	blx	r3
 8006f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f86:	e00f      	b.n	8006fa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fa49 	bl	8007422 <USBD_CtlError>
            err++;
 8006f90:	7afb      	ldrb	r3, [r7, #11]
 8006f92:	3301      	adds	r3, #1
 8006f94:	72fb      	strb	r3, [r7, #11]
          break;
 8006f96:	e007      	b.n	8006fa8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fa41 	bl	8007422 <USBD_CtlError>
          err++;
 8006fa0:	7afb      	ldrb	r3, [r7, #11]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006fa6:	bf00      	nop
      }
      break;
 8006fa8:	e037      	b.n	800701a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	7c1b      	ldrb	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d109      	bne.n	8006fc6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fba:	f107 0208 	add.w	r2, r7, #8
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	4798      	blx	r3
 8006fc2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fc4:	e029      	b.n	800701a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fa2a 	bl	8007422 <USBD_CtlError>
        err++;
 8006fce:	7afb      	ldrb	r3, [r7, #11]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	72fb      	strb	r3, [r7, #11]
      break;
 8006fd4:	e021      	b.n	800701a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	7c1b      	ldrb	r3, [r3, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10d      	bne.n	8006ffa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	f107 0208 	add.w	r2, r7, #8
 8006fea:	4610      	mov	r0, r2
 8006fec:	4798      	blx	r3
 8006fee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	2207      	movs	r2, #7
 8006ff6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ff8:	e00f      	b.n	800701a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fa10 	bl	8007422 <USBD_CtlError>
        err++;
 8007002:	7afb      	ldrb	r3, [r7, #11]
 8007004:	3301      	adds	r3, #1
 8007006:	72fb      	strb	r3, [r7, #11]
      break;
 8007008:	e007      	b.n	800701a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fa08 	bl	8007422 <USBD_CtlError>
      err++;
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	3301      	adds	r3, #1
 8007016:	72fb      	strb	r3, [r7, #11]
      break;
 8007018:	bf00      	nop
  }

  if (err != 0U)
 800701a:	7afb      	ldrb	r3, [r7, #11]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d11e      	bne.n	800705e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	88db      	ldrh	r3, [r3, #6]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d016      	beq.n	8007056 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007028:	893b      	ldrh	r3, [r7, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00e      	beq.n	800704c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	88da      	ldrh	r2, [r3, #6]
 8007032:	893b      	ldrh	r3, [r7, #8]
 8007034:	4293      	cmp	r3, r2
 8007036:	bf28      	it	cs
 8007038:	4613      	movcs	r3, r2
 800703a:	b29b      	uxth	r3, r3
 800703c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800703e:	893b      	ldrh	r3, [r7, #8]
 8007040:	461a      	mov	r2, r3
 8007042:	68f9      	ldr	r1, [r7, #12]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fa5d 	bl	8007504 <USBD_CtlSendData>
 800704a:	e009      	b.n	8007060 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f9e7 	bl	8007422 <USBD_CtlError>
 8007054:	e004      	b.n	8007060 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 faae 	bl	80075b8 <USBD_CtlSendStatus>
 800705c:	e000      	b.n	8007060 <USBD_GetDescriptor+0x2cc>
    return;
 800705e:	bf00      	nop
  }
}
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop

08007068 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	889b      	ldrh	r3, [r3, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d131      	bne.n	80070de <USBD_SetAddress+0x76>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	88db      	ldrh	r3, [r3, #6]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d12d      	bne.n	80070de <USBD_SetAddress+0x76>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	885b      	ldrh	r3, [r3, #2]
 8007086:	2b7f      	cmp	r3, #127	; 0x7f
 8007088:	d829      	bhi.n	80070de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	885b      	ldrh	r3, [r3, #2]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007094:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d104      	bne.n	80070ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f9bc 	bl	8007422 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070aa:	e01d      	b.n	80070e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7bfa      	ldrb	r2, [r7, #15]
 80070b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 ff05 	bl	8007ec8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa7a 	bl	80075b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d004      	beq.n	80070d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2202      	movs	r2, #2
 80070ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d2:	e009      	b.n	80070e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070dc:	e004      	b.n	80070e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f99e 	bl	8007422 <USBD_CtlError>
  }
}
 80070e6:	bf00      	nop
 80070e8:	bf00      	nop
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	885b      	ldrh	r3, [r3, #2]
 8007102:	b2da      	uxtb	r2, r3
 8007104:	4b4e      	ldr	r3, [pc, #312]	; (8007240 <USBD_SetConfig+0x150>)
 8007106:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007108:	4b4d      	ldr	r3, [pc, #308]	; (8007240 <USBD_SetConfig+0x150>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d905      	bls.n	800711c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f985 	bl	8007422 <USBD_CtlError>
    return USBD_FAIL;
 8007118:	2303      	movs	r3, #3
 800711a:	e08c      	b.n	8007236 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d002      	beq.n	800712e <USBD_SetConfig+0x3e>
 8007128:	2b03      	cmp	r3, #3
 800712a:	d029      	beq.n	8007180 <USBD_SetConfig+0x90>
 800712c:	e075      	b.n	800721a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800712e:	4b44      	ldr	r3, [pc, #272]	; (8007240 <USBD_SetConfig+0x150>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d020      	beq.n	8007178 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007136:	4b42      	ldr	r3, [pc, #264]	; (8007240 <USBD_SetConfig+0x150>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007140:	4b3f      	ldr	r3, [pc, #252]	; (8007240 <USBD_SetConfig+0x150>)
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fe ffe7 	bl	800611a <USBD_SetClassConfig>
 800714c:	4603      	mov	r3, r0
 800714e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d008      	beq.n	8007168 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f962 	bl	8007422 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2202      	movs	r2, #2
 8007162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007166:	e065      	b.n	8007234 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fa25 	bl	80075b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2203      	movs	r2, #3
 8007172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007176:	e05d      	b.n	8007234 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fa1d 	bl	80075b8 <USBD_CtlSendStatus>
      break;
 800717e:	e059      	b.n	8007234 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007180:	4b2f      	ldr	r3, [pc, #188]	; (8007240 <USBD_SetConfig+0x150>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d112      	bne.n	80071ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007190:	4b2b      	ldr	r3, [pc, #172]	; (8007240 <USBD_SetConfig+0x150>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	461a      	mov	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800719a:	4b29      	ldr	r3, [pc, #164]	; (8007240 <USBD_SetConfig+0x150>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7fe ffd6 	bl	8006152 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa06 	bl	80075b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071ac:	e042      	b.n	8007234 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80071ae:	4b24      	ldr	r3, [pc, #144]	; (8007240 <USBD_SetConfig+0x150>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d02a      	beq.n	8007212 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7fe ffc4 	bl	8006152 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80071ca:	4b1d      	ldr	r3, [pc, #116]	; (8007240 <USBD_SetConfig+0x150>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071d4:	4b1a      	ldr	r3, [pc, #104]	; (8007240 <USBD_SetConfig+0x150>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fe ff9d 	bl	800611a <USBD_SetClassConfig>
 80071e0:	4603      	mov	r3, r0
 80071e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00f      	beq.n	800720a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f918 	bl	8007422 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7fe ffa9 	bl	8006152 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007208:	e014      	b.n	8007234 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f9d4 	bl	80075b8 <USBD_CtlSendStatus>
      break;
 8007210:	e010      	b.n	8007234 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f9d0 	bl	80075b8 <USBD_CtlSendStatus>
      break;
 8007218:	e00c      	b.n	8007234 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f900 	bl	8007422 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007222:	4b07      	ldr	r3, [pc, #28]	; (8007240 <USBD_SetConfig+0x150>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7fe ff92 	bl	8006152 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800722e:	2303      	movs	r3, #3
 8007230:	73fb      	strb	r3, [r7, #15]
      break;
 8007232:	bf00      	nop
  }

  return ret;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	200001d8 	.word	0x200001d8

08007244 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	88db      	ldrh	r3, [r3, #6]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d004      	beq.n	8007260 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f8e2 	bl	8007422 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800725e:	e023      	b.n	80072a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b02      	cmp	r3, #2
 800726a:	dc02      	bgt.n	8007272 <USBD_GetConfig+0x2e>
 800726c:	2b00      	cmp	r3, #0
 800726e:	dc03      	bgt.n	8007278 <USBD_GetConfig+0x34>
 8007270:	e015      	b.n	800729e <USBD_GetConfig+0x5a>
 8007272:	2b03      	cmp	r3, #3
 8007274:	d00b      	beq.n	800728e <USBD_GetConfig+0x4a>
 8007276:	e012      	b.n	800729e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3308      	adds	r3, #8
 8007282:	2201      	movs	r2, #1
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f93c 	bl	8007504 <USBD_CtlSendData>
        break;
 800728c:	e00c      	b.n	80072a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3304      	adds	r3, #4
 8007292:	2201      	movs	r2, #1
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f934 	bl	8007504 <USBD_CtlSendData>
        break;
 800729c:	e004      	b.n	80072a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f8be 	bl	8007422 <USBD_CtlError>
        break;
 80072a6:	bf00      	nop
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d81e      	bhi.n	8007306 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	88db      	ldrh	r3, [r3, #6]
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d004      	beq.n	80072da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f8a5 	bl	8007422 <USBD_CtlError>
        break;
 80072d8:	e01a      	b.n	8007310 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f043 0202 	orr.w	r2, r3, #2
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	330c      	adds	r3, #12
 80072fa:	2202      	movs	r2, #2
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f900 	bl	8007504 <USBD_CtlSendData>
      break;
 8007304:	e004      	b.n	8007310 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f88a 	bl	8007422 <USBD_CtlError>
      break;
 800730e:	bf00      	nop
  }
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	885b      	ldrh	r3, [r3, #2]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d107      	bne.n	800733a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f940 	bl	80075b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007338:	e013      	b.n	8007362 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	885b      	ldrh	r3, [r3, #2]
 800733e:	2b02      	cmp	r3, #2
 8007340:	d10b      	bne.n	800735a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	889b      	ldrh	r3, [r3, #4]
 8007346:	0a1b      	lsrs	r3, r3, #8
 8007348:	b29b      	uxth	r3, r3
 800734a:	b2da      	uxtb	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f930 	bl	80075b8 <USBD_CtlSendStatus>
}
 8007358:	e003      	b.n	8007362 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f860 	bl	8007422 <USBD_CtlError>
}
 8007362:	bf00      	nop
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b082      	sub	sp, #8
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800737a:	b2db      	uxtb	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	2b02      	cmp	r3, #2
 8007380:	d80b      	bhi.n	800739a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	885b      	ldrh	r3, [r3, #2]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d10c      	bne.n	80073a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f910 	bl	80075b8 <USBD_CtlSendStatus>
      }
      break;
 8007398:	e004      	b.n	80073a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f840 	bl	8007422 <USBD_CtlError>
      break;
 80073a2:	e000      	b.n	80073a6 <USBD_ClrFeature+0x3c>
      break;
 80073a4:	bf00      	nop
  }
}
 80073a6:	bf00      	nop
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	781a      	ldrb	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	3301      	adds	r3, #1
 80073c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	781a      	ldrb	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3301      	adds	r3, #1
 80073d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7ff fa41 	bl	8006860 <SWAPBYTE>
 80073de:	4603      	mov	r3, r0
 80073e0:	461a      	mov	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3301      	adds	r3, #1
 80073ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	3301      	adds	r3, #1
 80073f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f7ff fa34 	bl	8006860 <SWAPBYTE>
 80073f8:	4603      	mov	r3, r0
 80073fa:	461a      	mov	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3301      	adds	r3, #1
 8007404:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3301      	adds	r3, #1
 800740a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f7ff fa27 	bl	8006860 <SWAPBYTE>
 8007412:	4603      	mov	r3, r0
 8007414:	461a      	mov	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	80da      	strh	r2, [r3, #6]
}
 800741a:	bf00      	nop
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800742c:	2180      	movs	r1, #128	; 0x80
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fce0 	bl	8007df4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007434:	2100      	movs	r1, #0
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fcdc 	bl	8007df4 <USBD_LL_StallEP>
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d036      	beq.n	80074c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800745e:	6938      	ldr	r0, [r7, #16]
 8007460:	f000 f836 	bl	80074d0 <USBD_GetLen>
 8007464:	4603      	mov	r3, r0
 8007466:	3301      	adds	r3, #1
 8007468:	b29b      	uxth	r3, r3
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	b29a      	uxth	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	4413      	add	r3, r2
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	7812      	ldrb	r2, [r2, #0]
 800747c:	701a      	strb	r2, [r3, #0]
  idx++;
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	3301      	adds	r3, #1
 8007482:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	4413      	add	r3, r2
 800748a:	2203      	movs	r2, #3
 800748c:	701a      	strb	r2, [r3, #0]
  idx++;
 800748e:	7dfb      	ldrb	r3, [r7, #23]
 8007490:	3301      	adds	r3, #1
 8007492:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007494:	e013      	b.n	80074be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007496:	7dfb      	ldrb	r3, [r7, #23]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	4413      	add	r3, r2
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	7812      	ldrb	r2, [r2, #0]
 80074a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	3301      	adds	r3, #1
 80074a6:	613b      	str	r3, [r7, #16]
    idx++;
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	3301      	adds	r3, #1
 80074ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	4413      	add	r3, r2
 80074b4:	2200      	movs	r2, #0
 80074b6:	701a      	strb	r2, [r3, #0]
    idx++;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	3301      	adds	r3, #1
 80074bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1e7      	bne.n	8007496 <USBD_GetString+0x52>
 80074c6:	e000      	b.n	80074ca <USBD_GetString+0x86>
    return;
 80074c8:	bf00      	nop
  }
}
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074e0:	e005      	b.n	80074ee <USBD_GetLen+0x1e>
  {
    len++;
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	3301      	adds	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	3301      	adds	r3, #1
 80074ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1f5      	bne.n	80074e2 <USBD_GetLen+0x12>
  }

  return len;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2202      	movs	r2, #2
 8007514:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	2100      	movs	r1, #0
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f000 fceb 	bl	8007f06 <USBD_LL_Transmit>

  return USBD_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	2100      	movs	r1, #0
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 fcda 	bl	8007f06 <USBD_LL_Transmit>

  return USBD_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2203      	movs	r2, #3
 800756c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	2100      	movs	r1, #0
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 fcde 	bl	8007f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	2100      	movs	r1, #0
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fccd 	bl	8007f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2204      	movs	r2, #4
 80075c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075c8:	2300      	movs	r3, #0
 80075ca:	2200      	movs	r2, #0
 80075cc:	2100      	movs	r1, #0
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fc99 	bl	8007f06 <USBD_LL_Transmit>

  return USBD_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2205      	movs	r2, #5
 80075ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075ee:	2300      	movs	r3, #0
 80075f0:	2200      	movs	r2, #0
 80075f2:	2100      	movs	r1, #0
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fca7 	bl	8007f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007608:	2200      	movs	r2, #0
 800760a:	4912      	ldr	r1, [pc, #72]	; (8007654 <MX_USB_DEVICE_Init+0x50>)
 800760c:	4812      	ldr	r0, [pc, #72]	; (8007658 <MX_USB_DEVICE_Init+0x54>)
 800760e:	f7fe fd07 	bl	8006020 <USBD_Init>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007618:	f7f9 f914 	bl	8000844 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800761c:	490f      	ldr	r1, [pc, #60]	; (800765c <MX_USB_DEVICE_Init+0x58>)
 800761e:	480e      	ldr	r0, [pc, #56]	; (8007658 <MX_USB_DEVICE_Init+0x54>)
 8007620:	f7fe fd2e 	bl	8006080 <USBD_RegisterClass>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800762a:	f7f9 f90b 	bl	8000844 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800762e:	490c      	ldr	r1, [pc, #48]	; (8007660 <MX_USB_DEVICE_Init+0x5c>)
 8007630:	4809      	ldr	r0, [pc, #36]	; (8007658 <MX_USB_DEVICE_Init+0x54>)
 8007632:	f7fe fc1f 	bl	8005e74 <USBD_CDC_RegisterInterface>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800763c:	f7f9 f902 	bl	8000844 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007640:	4805      	ldr	r0, [pc, #20]	; (8007658 <MX_USB_DEVICE_Init+0x54>)
 8007642:	f7fe fd53 	bl	80060ec <USBD_Start>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800764c:	f7f9 f8fa 	bl	8000844 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007650:	bf00      	nop
 8007652:	bd80      	pop	{r7, pc}
 8007654:	200000ac 	.word	0x200000ac
 8007658:	200001dc 	.word	0x200001dc
 800765c:	20000018 	.word	0x20000018
 8007660:	20000098 	.word	0x20000098

08007664 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007668:	2200      	movs	r2, #0
 800766a:	4905      	ldr	r1, [pc, #20]	; (8007680 <CDC_Init_FS+0x1c>)
 800766c:	4805      	ldr	r0, [pc, #20]	; (8007684 <CDC_Init_FS+0x20>)
 800766e:	f7fe fc1b 	bl	8005ea8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007672:	4905      	ldr	r1, [pc, #20]	; (8007688 <CDC_Init_FS+0x24>)
 8007674:	4803      	ldr	r0, [pc, #12]	; (8007684 <CDC_Init_FS+0x20>)
 8007676:	f7fe fc39 	bl	8005eec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800767a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800767c:	4618      	mov	r0, r3
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000cb8 	.word	0x20000cb8
 8007684:	200001dc 	.word	0x200001dc
 8007688:	200004b8 	.word	0x200004b8

0800768c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800768c:	b480      	push	{r7}
 800768e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007690:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007692:	4618      	mov	r0, r3
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	4603      	mov	r3, r0
 80076a4:	6039      	str	r1, [r7, #0]
 80076a6:	71fb      	strb	r3, [r7, #7]
 80076a8:	4613      	mov	r3, r2
 80076aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	2b23      	cmp	r3, #35	; 0x23
 80076b0:	d84a      	bhi.n	8007748 <CDC_Control_FS+0xac>
 80076b2:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <CDC_Control_FS+0x1c>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	08007749 	.word	0x08007749
 80076bc:	08007749 	.word	0x08007749
 80076c0:	08007749 	.word	0x08007749
 80076c4:	08007749 	.word	0x08007749
 80076c8:	08007749 	.word	0x08007749
 80076cc:	08007749 	.word	0x08007749
 80076d0:	08007749 	.word	0x08007749
 80076d4:	08007749 	.word	0x08007749
 80076d8:	08007749 	.word	0x08007749
 80076dc:	08007749 	.word	0x08007749
 80076e0:	08007749 	.word	0x08007749
 80076e4:	08007749 	.word	0x08007749
 80076e8:	08007749 	.word	0x08007749
 80076ec:	08007749 	.word	0x08007749
 80076f0:	08007749 	.word	0x08007749
 80076f4:	08007749 	.word	0x08007749
 80076f8:	08007749 	.word	0x08007749
 80076fc:	08007749 	.word	0x08007749
 8007700:	08007749 	.word	0x08007749
 8007704:	08007749 	.word	0x08007749
 8007708:	08007749 	.word	0x08007749
 800770c:	08007749 	.word	0x08007749
 8007710:	08007749 	.word	0x08007749
 8007714:	08007749 	.word	0x08007749
 8007718:	08007749 	.word	0x08007749
 800771c:	08007749 	.word	0x08007749
 8007720:	08007749 	.word	0x08007749
 8007724:	08007749 	.word	0x08007749
 8007728:	08007749 	.word	0x08007749
 800772c:	08007749 	.word	0x08007749
 8007730:	08007749 	.word	0x08007749
 8007734:	08007749 	.word	0x08007749
 8007738:	08007749 	.word	0x08007749
 800773c:	08007749 	.word	0x08007749
 8007740:	08007749 	.word	0x08007749
 8007744:	08007749 	.word	0x08007749
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007748:	bf00      	nop
  }

  return (USBD_OK);
 800774a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007762:	6879      	ldr	r1, [r7, #4]
 8007764:	4805      	ldr	r0, [pc, #20]	; (800777c <CDC_Receive_FS+0x24>)
 8007766:	f7fe fbc1 	bl	8005eec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800776a:	4804      	ldr	r0, [pc, #16]	; (800777c <CDC_Receive_FS+0x24>)
 800776c:	f7fe fc22 	bl	8005fb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007770:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	200001dc 	.word	0x200001dc

08007780 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007790:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <CDC_Transmit_FS+0x48>)
 8007792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007796:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e00b      	b.n	80077be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80077a6:	887b      	ldrh	r3, [r7, #2]
 80077a8:	461a      	mov	r2, r3
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	4806      	ldr	r0, [pc, #24]	; (80077c8 <CDC_Transmit_FS+0x48>)
 80077ae:	f7fe fb7b 	bl	8005ea8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80077b2:	4805      	ldr	r0, [pc, #20]	; (80077c8 <CDC_Transmit_FS+0x48>)
 80077b4:	f7fe fbb8 	bl	8005f28 <USBD_CDC_TransmitPacket>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	200001dc 	.word	0x200001dc

080077cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	4613      	mov	r3, r2
 80077d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80077de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	371c      	adds	r7, #28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4603      	mov	r3, r0
 80077f8:	6039      	str	r1, [r7, #0]
 80077fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2212      	movs	r2, #18
 8007800:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007802:	4b03      	ldr	r3, [pc, #12]	; (8007810 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007804:	4618      	mov	r0, r3
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	200000c8 	.word	0x200000c8

08007814 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	6039      	str	r1, [r7, #0]
 800781e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2204      	movs	r2, #4
 8007824:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007826:	4b03      	ldr	r3, [pc, #12]	; (8007834 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007828:	4618      	mov	r0, r3
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	200000dc 	.word	0x200000dc

08007838 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	6039      	str	r1, [r7, #0]
 8007842:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007844:	79fb      	ldrb	r3, [r7, #7]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d105      	bne.n	8007856 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	4907      	ldr	r1, [pc, #28]	; (800786c <USBD_FS_ProductStrDescriptor+0x34>)
 800784e:	4808      	ldr	r0, [pc, #32]	; (8007870 <USBD_FS_ProductStrDescriptor+0x38>)
 8007850:	f7ff fdf8 	bl	8007444 <USBD_GetString>
 8007854:	e004      	b.n	8007860 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	4904      	ldr	r1, [pc, #16]	; (800786c <USBD_FS_ProductStrDescriptor+0x34>)
 800785a:	4805      	ldr	r0, [pc, #20]	; (8007870 <USBD_FS_ProductStrDescriptor+0x38>)
 800785c:	f7ff fdf2 	bl	8007444 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007860:	4b02      	ldr	r3, [pc, #8]	; (800786c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	200014b8 	.word	0x200014b8
 8007870:	080080a8 	.word	0x080080a8

08007874 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	6039      	str	r1, [r7, #0]
 800787e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	4904      	ldr	r1, [pc, #16]	; (8007894 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007884:	4804      	ldr	r0, [pc, #16]	; (8007898 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007886:	f7ff fddd 	bl	8007444 <USBD_GetString>
  return USBD_StrDesc;
 800788a:	4b02      	ldr	r3, [pc, #8]	; (8007894 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	200014b8 	.word	0x200014b8
 8007898:	080080c0 	.word	0x080080c0

0800789c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	6039      	str	r1, [r7, #0]
 80078a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	221a      	movs	r2, #26
 80078ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80078ae:	f000 f843 	bl	8007938 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80078b2:	4b02      	ldr	r3, [pc, #8]	; (80078bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	200000e0 	.word	0x200000e0

080078c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	6039      	str	r1, [r7, #0]
 80078ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d105      	bne.n	80078de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4907      	ldr	r1, [pc, #28]	; (80078f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80078d6:	4808      	ldr	r0, [pc, #32]	; (80078f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078d8:	f7ff fdb4 	bl	8007444 <USBD_GetString>
 80078dc:	e004      	b.n	80078e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	4904      	ldr	r1, [pc, #16]	; (80078f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80078e2:	4805      	ldr	r0, [pc, #20]	; (80078f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078e4:	f7ff fdae 	bl	8007444 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078e8:	4b02      	ldr	r3, [pc, #8]	; (80078f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	200014b8 	.word	0x200014b8
 80078f8:	080080d4 	.word	0x080080d4

080078fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	6039      	str	r1, [r7, #0]
 8007906:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007908:	79fb      	ldrb	r3, [r7, #7]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d105      	bne.n	800791a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	4907      	ldr	r1, [pc, #28]	; (8007930 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007912:	4808      	ldr	r0, [pc, #32]	; (8007934 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007914:	f7ff fd96 	bl	8007444 <USBD_GetString>
 8007918:	e004      	b.n	8007924 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	4904      	ldr	r1, [pc, #16]	; (8007930 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800791e:	4805      	ldr	r0, [pc, #20]	; (8007934 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007920:	f7ff fd90 	bl	8007444 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007924:	4b02      	ldr	r3, [pc, #8]	; (8007930 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	200014b8 	.word	0x200014b8
 8007934:	080080e0 	.word	0x080080e0

08007938 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800793e:	4b0f      	ldr	r3, [pc, #60]	; (800797c <Get_SerialNum+0x44>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007944:	4b0e      	ldr	r3, [pc, #56]	; (8007980 <Get_SerialNum+0x48>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800794a:	4b0e      	ldr	r3, [pc, #56]	; (8007984 <Get_SerialNum+0x4c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4413      	add	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d009      	beq.n	8007972 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800795e:	2208      	movs	r2, #8
 8007960:	4909      	ldr	r1, [pc, #36]	; (8007988 <Get_SerialNum+0x50>)
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 f814 	bl	8007990 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007968:	2204      	movs	r2, #4
 800796a:	4908      	ldr	r1, [pc, #32]	; (800798c <Get_SerialNum+0x54>)
 800796c:	68b8      	ldr	r0, [r7, #8]
 800796e:	f000 f80f 	bl	8007990 <IntToUnicode>
  }
}
 8007972:	bf00      	nop
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	1fff7a10 	.word	0x1fff7a10
 8007980:	1fff7a14 	.word	0x1fff7a14
 8007984:	1fff7a18 	.word	0x1fff7a18
 8007988:	200000e2 	.word	0x200000e2
 800798c:	200000f2 	.word	0x200000f2

08007990 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	4613      	mov	r3, r2
 800799c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800799e:	2300      	movs	r3, #0
 80079a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80079a2:	2300      	movs	r3, #0
 80079a4:	75fb      	strb	r3, [r7, #23]
 80079a6:	e027      	b.n	80079f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	0f1b      	lsrs	r3, r3, #28
 80079ac:	2b09      	cmp	r3, #9
 80079ae:	d80b      	bhi.n	80079c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	0f1b      	lsrs	r3, r3, #28
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	4619      	mov	r1, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	440b      	add	r3, r1
 80079c0:	3230      	adds	r2, #48	; 0x30
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	e00a      	b.n	80079de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	0f1b      	lsrs	r3, r3, #28
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	4619      	mov	r1, r3
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	440b      	add	r3, r1
 80079d8:	3237      	adds	r2, #55	; 0x37
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	011b      	lsls	r3, r3, #4
 80079e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	3301      	adds	r3, #1
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	4413      	add	r3, r2
 80079ee:	2200      	movs	r2, #0
 80079f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
 80079f4:	3301      	adds	r3, #1
 80079f6:	75fb      	strb	r3, [r7, #23]
 80079f8:	7dfa      	ldrb	r2, [r7, #23]
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d3d3      	bcc.n	80079a8 <IntToUnicode+0x18>
  }
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	371c      	adds	r7, #28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
	...

08007a10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08a      	sub	sp, #40	; 0x28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a18:	f107 0314 	add.w	r3, r7, #20
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	605a      	str	r2, [r3, #4]
 8007a22:	609a      	str	r2, [r3, #8]
 8007a24:	60da      	str	r2, [r3, #12]
 8007a26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a30:	d13a      	bne.n	8007aa8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a32:	2300      	movs	r3, #0
 8007a34:	613b      	str	r3, [r7, #16]
 8007a36:	4b1e      	ldr	r3, [pc, #120]	; (8007ab0 <HAL_PCD_MspInit+0xa0>)
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	4a1d      	ldr	r2, [pc, #116]	; (8007ab0 <HAL_PCD_MspInit+0xa0>)
 8007a3c:	f043 0301 	orr.w	r3, r3, #1
 8007a40:	6313      	str	r3, [r2, #48]	; 0x30
 8007a42:	4b1b      	ldr	r3, [pc, #108]	; (8007ab0 <HAL_PCD_MspInit+0xa0>)
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	613b      	str	r3, [r7, #16]
 8007a4c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007a4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a54:	2302      	movs	r3, #2
 8007a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a60:	230a      	movs	r3, #10
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a64:	f107 0314 	add.w	r3, r7, #20
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4812      	ldr	r0, [pc, #72]	; (8007ab4 <HAL_PCD_MspInit+0xa4>)
 8007a6c:	f7fa f92a 	bl	8001cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a70:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <HAL_PCD_MspInit+0xa0>)
 8007a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a74:	4a0e      	ldr	r2, [pc, #56]	; (8007ab0 <HAL_PCD_MspInit+0xa0>)
 8007a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a7a:	6353      	str	r3, [r2, #52]	; 0x34
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <HAL_PCD_MspInit+0xa0>)
 8007a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a84:	4a0a      	ldr	r2, [pc, #40]	; (8007ab0 <HAL_PCD_MspInit+0xa0>)
 8007a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a8a:	6453      	str	r3, [r2, #68]	; 0x44
 8007a8c:	4b08      	ldr	r3, [pc, #32]	; (8007ab0 <HAL_PCD_MspInit+0xa0>)
 8007a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	2043      	movs	r0, #67	; 0x43
 8007a9e:	f7f9 fd6a 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007aa2:	2043      	movs	r0, #67	; 0x43
 8007aa4:	f7f9 fd83 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007aa8:	bf00      	nop
 8007aaa:	3728      	adds	r7, #40	; 0x28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	40023800 	.word	0x40023800
 8007ab4:	40020000 	.word	0x40020000

08007ab8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007acc:	4619      	mov	r1, r3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	f7fe fb59 	bl	8006186 <USBD_LL_SetupStage>
}
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007aee:	78fa      	ldrb	r2, [r7, #3]
 8007af0:	6879      	ldr	r1, [r7, #4]
 8007af2:	4613      	mov	r3, r2
 8007af4:	00db      	lsls	r3, r3, #3
 8007af6:	4413      	add	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	440b      	add	r3, r1
 8007afc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	78fb      	ldrb	r3, [r7, #3]
 8007b04:	4619      	mov	r1, r3
 8007b06:	f7fe fb93 	bl	8006230 <USBD_LL_DataOutStage>
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b082      	sub	sp, #8
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007b24:	78fa      	ldrb	r2, [r7, #3]
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	00db      	lsls	r3, r3, #3
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	440b      	add	r3, r1
 8007b32:	334c      	adds	r3, #76	; 0x4c
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	78fb      	ldrb	r3, [r7, #3]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	f7fe fc2c 	bl	8006396 <USBD_LL_DataInStage>
}
 8007b3e:	bf00      	nop
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b082      	sub	sp, #8
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe fd60 	bl	800661a <USBD_LL_SOF>
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d102      	bne.n	8007b7c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007b76:	2300      	movs	r3, #0
 8007b78:	73fb      	strb	r3, [r7, #15]
 8007b7a:	e008      	b.n	8007b8e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d102      	bne.n	8007b8a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007b84:	2301      	movs	r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]
 8007b88:	e001      	b.n	8007b8e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007b8a:	f7f8 fe5b 	bl	8000844 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b94:	7bfa      	ldrb	r2, [r7, #15]
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fe fd00 	bl	800659e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fe fca8 	bl	80064fa <USBD_LL_Reset>
}
 8007baa:	bf00      	nop
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fe fcfb 	bl	80065be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6812      	ldr	r2, [r2, #0]
 8007bd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bda:	f043 0301 	orr.w	r3, r3, #1
 8007bde:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d005      	beq.n	8007bf4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007be8:	4b04      	ldr	r3, [pc, #16]	; (8007bfc <HAL_PCD_SuspendCallback+0x48>)
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	4a03      	ldr	r2, [pc, #12]	; (8007bfc <HAL_PCD_SuspendCallback+0x48>)
 8007bee:	f043 0306 	orr.w	r3, r3, #6
 8007bf2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007bf4:	bf00      	nop
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	e000ed00 	.word	0xe000ed00

08007c00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe fceb 	bl	80065ea <USBD_LL_Resume>
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c2e:	78fa      	ldrb	r2, [r7, #3]
 8007c30:	4611      	mov	r1, r2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fe fd43 	bl	80066be <USBD_LL_IsoOUTIncomplete>
}
 8007c38:	bf00      	nop
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c52:	78fa      	ldrb	r2, [r7, #3]
 8007c54:	4611      	mov	r1, r2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe fcff 	bl	800665a <USBD_LL_IsoINIncomplete>
}
 8007c5c:	bf00      	nop
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fd55 	bl	8006722 <USBD_LL_DevConnected>
}
 8007c78:	bf00      	nop
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe fd52 	bl	8006738 <USBD_LL_DevDisconnected>
}
 8007c94:	bf00      	nop
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d13c      	bne.n	8007d26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007cac:	4a20      	ldr	r2, [pc, #128]	; (8007d30 <USBD_LL_Init+0x94>)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a1e      	ldr	r2, [pc, #120]	; (8007d30 <USBD_LL_Init+0x94>)
 8007cb8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007cbc:	4b1c      	ldr	r3, [pc, #112]	; (8007d30 <USBD_LL_Init+0x94>)
 8007cbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007cc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007cc4:	4b1a      	ldr	r3, [pc, #104]	; (8007d30 <USBD_LL_Init+0x94>)
 8007cc6:	2204      	movs	r2, #4
 8007cc8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007cca:	4b19      	ldr	r3, [pc, #100]	; (8007d30 <USBD_LL_Init+0x94>)
 8007ccc:	2202      	movs	r2, #2
 8007cce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007cd0:	4b17      	ldr	r3, [pc, #92]	; (8007d30 <USBD_LL_Init+0x94>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007cd6:	4b16      	ldr	r3, [pc, #88]	; (8007d30 <USBD_LL_Init+0x94>)
 8007cd8:	2202      	movs	r2, #2
 8007cda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007cdc:	4b14      	ldr	r3, [pc, #80]	; (8007d30 <USBD_LL_Init+0x94>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ce2:	4b13      	ldr	r3, [pc, #76]	; (8007d30 <USBD_LL_Init+0x94>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ce8:	4b11      	ldr	r3, [pc, #68]	; (8007d30 <USBD_LL_Init+0x94>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007cee:	4b10      	ldr	r3, [pc, #64]	; (8007d30 <USBD_LL_Init+0x94>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007cf4:	4b0e      	ldr	r3, [pc, #56]	; (8007d30 <USBD_LL_Init+0x94>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007cfa:	480d      	ldr	r0, [pc, #52]	; (8007d30 <USBD_LL_Init+0x94>)
 8007cfc:	f7fa f97e 	bl	8001ffc <HAL_PCD_Init>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d06:	f7f8 fd9d 	bl	8000844 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d0a:	2180      	movs	r1, #128	; 0x80
 8007d0c:	4808      	ldr	r0, [pc, #32]	; (8007d30 <USBD_LL_Init+0x94>)
 8007d0e:	f7fb fbd6 	bl	80034be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d12:	2240      	movs	r2, #64	; 0x40
 8007d14:	2100      	movs	r1, #0
 8007d16:	4806      	ldr	r0, [pc, #24]	; (8007d30 <USBD_LL_Init+0x94>)
 8007d18:	f7fb fb8a 	bl	8003430 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d1c:	2280      	movs	r2, #128	; 0x80
 8007d1e:	2101      	movs	r1, #1
 8007d20:	4803      	ldr	r0, [pc, #12]	; (8007d30 <USBD_LL_Init+0x94>)
 8007d22:	f7fb fb85 	bl	8003430 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	200016b8 	.word	0x200016b8

08007d34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fa fa73 	bl	8002236 <HAL_PCD_Start>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 f942 	bl	8007fe0 <USBD_Get_USB_Status>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	4608      	mov	r0, r1
 8007d74:	4611      	mov	r1, r2
 8007d76:	461a      	mov	r2, r3
 8007d78:	4603      	mov	r3, r0
 8007d7a:	70fb      	strb	r3, [r7, #3]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70bb      	strb	r3, [r7, #2]
 8007d80:	4613      	mov	r3, r2
 8007d82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d92:	78bb      	ldrb	r3, [r7, #2]
 8007d94:	883a      	ldrh	r2, [r7, #0]
 8007d96:	78f9      	ldrb	r1, [r7, #3]
 8007d98:	f7fa ff44 	bl	8002c24 <HAL_PCD_EP_Open>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 f91c 	bl	8007fe0 <USBD_Get_USB_Status>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007dd0:	78fa      	ldrb	r2, [r7, #3]
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7fa ff8d 	bl	8002cf4 <HAL_PCD_EP_Close>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 f8fd 	bl	8007fe0 <USBD_Get_USB_Status>
 8007de6:	4603      	mov	r3, r0
 8007de8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e0e:	78fa      	ldrb	r2, [r7, #3]
 8007e10:	4611      	mov	r1, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fb f865 	bl	8002ee2 <HAL_PCD_EP_SetStall>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 f8de 	bl	8007fe0 <USBD_Get_USB_Status>
 8007e24:	4603      	mov	r3, r0
 8007e26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e4c:	78fa      	ldrb	r2, [r7, #3]
 8007e4e:	4611      	mov	r1, r2
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fb f8aa 	bl	8002faa <HAL_PCD_EP_ClrStall>
 8007e56:	4603      	mov	r3, r0
 8007e58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 f8bf 	bl	8007fe0 <USBD_Get_USB_Status>
 8007e62:	4603      	mov	r3, r0
 8007e64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	da0b      	bge.n	8007ea4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e92:	68f9      	ldr	r1, [r7, #12]
 8007e94:	4613      	mov	r3, r2
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	4413      	add	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	440b      	add	r3, r1
 8007e9e:	333e      	adds	r3, #62	; 0x3e
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	e00b      	b.n	8007ebc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eaa:	68f9      	ldr	r1, [r7, #12]
 8007eac:	4613      	mov	r3, r2
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	4413      	add	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	440b      	add	r3, r1
 8007eb6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007eba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ee2:	78fa      	ldrb	r2, [r7, #3]
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fa fe77 	bl	8002bda <HAL_PCD_SetAddress>
 8007eec:	4603      	mov	r3, r0
 8007eee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 f874 	bl	8007fe0 <USBD_Get_USB_Status>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b086      	sub	sp, #24
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	603b      	str	r3, [r7, #0]
 8007f12:	460b      	mov	r3, r1
 8007f14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007f24:	7af9      	ldrb	r1, [r7, #11]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	f7fa ff90 	bl	8002e4e <HAL_PCD_EP_Transmit>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f32:	7dfb      	ldrb	r3, [r7, #23]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 f853 	bl	8007fe0 <USBD_Get_USB_Status>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	607a      	str	r2, [r7, #4]
 8007f52:	603b      	str	r3, [r7, #0]
 8007f54:	460b      	mov	r3, r1
 8007f56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007f66:	7af9      	ldrb	r1, [r7, #11]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	f7fa ff0c 	bl	8002d88 <HAL_PCD_EP_Receive>
 8007f70:	4603      	mov	r3, r0
 8007f72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 f832 	bl	8007fe0 <USBD_Get_USB_Status>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f80:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	460b      	mov	r3, r1
 8007f94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f9c:	78fa      	ldrb	r2, [r7, #3]
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fa ff3c 	bl	8002e1e <HAL_PCD_EP_GetRxCount>
 8007fa6:	4603      	mov	r3, r0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007fb8:	4b03      	ldr	r3, [pc, #12]	; (8007fc8 <USBD_static_malloc+0x18>)
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	20001bc4 	.word	0x20001bc4

08007fcc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]

}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007fee:	79fb      	ldrb	r3, [r7, #7]
 8007ff0:	2b03      	cmp	r3, #3
 8007ff2:	d817      	bhi.n	8008024 <USBD_Get_USB_Status+0x44>
 8007ff4:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <USBD_Get_USB_Status+0x1c>)
 8007ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffa:	bf00      	nop
 8007ffc:	0800800d 	.word	0x0800800d
 8008000:	08008013 	.word	0x08008013
 8008004:	08008019 	.word	0x08008019
 8008008:	0800801f 	.word	0x0800801f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73fb      	strb	r3, [r7, #15]
    break;
 8008010:	e00b      	b.n	800802a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008012:	2303      	movs	r3, #3
 8008014:	73fb      	strb	r3, [r7, #15]
    break;
 8008016:	e008      	b.n	800802a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008018:	2301      	movs	r3, #1
 800801a:	73fb      	strb	r3, [r7, #15]
    break;
 800801c:	e005      	b.n	800802a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800801e:	2303      	movs	r3, #3
 8008020:	73fb      	strb	r3, [r7, #15]
    break;
 8008022:	e002      	b.n	800802a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008024:	2303      	movs	r3, #3
 8008026:	73fb      	strb	r3, [r7, #15]
    break;
 8008028:	bf00      	nop
  }
  return usb_status;
 800802a:	7bfb      	ldrb	r3, [r7, #15]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <memset>:
 8008038:	4402      	add	r2, r0
 800803a:	4603      	mov	r3, r0
 800803c:	4293      	cmp	r3, r2
 800803e:	d100      	bne.n	8008042 <memset+0xa>
 8008040:	4770      	bx	lr
 8008042:	f803 1b01 	strb.w	r1, [r3], #1
 8008046:	e7f9      	b.n	800803c <memset+0x4>

08008048 <__libc_init_array>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	4d0d      	ldr	r5, [pc, #52]	; (8008080 <__libc_init_array+0x38>)
 800804c:	4c0d      	ldr	r4, [pc, #52]	; (8008084 <__libc_init_array+0x3c>)
 800804e:	1b64      	subs	r4, r4, r5
 8008050:	10a4      	asrs	r4, r4, #2
 8008052:	2600      	movs	r6, #0
 8008054:	42a6      	cmp	r6, r4
 8008056:	d109      	bne.n	800806c <__libc_init_array+0x24>
 8008058:	4d0b      	ldr	r5, [pc, #44]	; (8008088 <__libc_init_array+0x40>)
 800805a:	4c0c      	ldr	r4, [pc, #48]	; (800808c <__libc_init_array+0x44>)
 800805c:	f000 f818 	bl	8008090 <_init>
 8008060:	1b64      	subs	r4, r4, r5
 8008062:	10a4      	asrs	r4, r4, #2
 8008064:	2600      	movs	r6, #0
 8008066:	42a6      	cmp	r6, r4
 8008068:	d105      	bne.n	8008076 <__libc_init_array+0x2e>
 800806a:	bd70      	pop	{r4, r5, r6, pc}
 800806c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008070:	4798      	blx	r3
 8008072:	3601      	adds	r6, #1
 8008074:	e7ee      	b.n	8008054 <__libc_init_array+0xc>
 8008076:	f855 3b04 	ldr.w	r3, [r5], #4
 800807a:	4798      	blx	r3
 800807c:	3601      	adds	r6, #1
 800807e:	e7f2      	b.n	8008066 <__libc_init_array+0x1e>
 8008080:	08008110 	.word	0x08008110
 8008084:	08008110 	.word	0x08008110
 8008088:	08008110 	.word	0x08008110
 800808c:	08008114 	.word	0x08008114

08008090 <_init>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	bf00      	nop
 8008094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008096:	bc08      	pop	{r3}
 8008098:	469e      	mov	lr, r3
 800809a:	4770      	bx	lr

0800809c <_fini>:
 800809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809e:	bf00      	nop
 80080a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a2:	bc08      	pop	{r3}
 80080a4:	469e      	mov	lr, r3
 80080a6:	4770      	bx	lr
